
outdoor3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001474  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00001474  000014e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001530  00000000  00000000  00001514  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000af6  00000000  00000000  00002a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000353a  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
       4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
       6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
       8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
       a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
       c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
       e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
      10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
      12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
      14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
      16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
      18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
      1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
      1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
      1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
      20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
      22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
      24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e4 e7       	ldi	r30, 0x74	; 116
      3a:	f4 e1       	ldi	r31, 0x14	; 20
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	aa 38       	cpi	r26, 0x8A	; 138
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
      48:	02 d0       	rcall	.+4      	; 0x4e <main>
      4a:	12 ca       	rjmp	.-3036   	; 0xfffff470 <__eeprom_end+0xff7ef470>

0000004c <__bad_interrupt>:
      4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <main>:

void send(void);
void receive(void);

int main(void)
{
      4e:	0f 93       	push	r16
      50:	1f 93       	push	r17
      52:	cf 93       	push	r28
      54:	df 93       	push	r29
      56:	cd b7       	in	r28, 0x3d	; 61
      58:	de b7       	in	r29, 0x3e	; 62
      5a:	2f 97       	sbiw	r28, 0x0f	; 15
      5c:	0f b6       	in	r0, 0x3f	; 63
      5e:	f8 94       	cli
      60:	de bf       	out	0x3e, r29	; 62
      62:	0f be       	out	0x3f, r0	; 63
      64:	cd bf       	out	0x3d, r28	; 61
	rf12_init();					// ein paar Register setzen (z.B. CLK auf 10MHz)
      66:	f8 d1       	rcall	.+1008   	; 0x458 <rf12_init>
	rf12_setfreq(RF12FREQ(433.92));	// Sende/Empfangsfrequenz auf 433,92MHz einstellen
      68:	80 e2       	ldi	r24, 0x20	; 32
      6a:	96 e0       	ldi	r25, 0x06	; 6
      6c:	d8 d2       	rcall	.+1456   	; 0x61e <rf12_setfreq>
	rf12_setbandwidth(4, 1, 4);		// 200kHz Bandbreite, -6dB Verstï¿½rkung, DRSSI threshold: -79dBm 
      6e:	44 e0       	ldi	r20, 0x04	; 4
      70:	61 e0       	ldi	r22, 0x01	; 1
      72:	84 e0       	ldi	r24, 0x04	; 4
      74:	a2 d2       	rcall	.+1348   	; 0x5ba <rf12_setbandwidth>
	rf12_setbaud(19200);			// 19200 baud
      76:	80 e0       	ldi	r24, 0x00	; 0
      78:	9b e4       	ldi	r25, 0x4B	; 75
      7a:	f5 d2       	rcall	.+1514   	; 0x666 <rf12_setbaud>
	rf12_setpower(0, 6);			// 1mW Ausgangangsleistung, 120kHz Frequenzshift
      7c:	66 e0       	ldi	r22, 0x06	; 6
      7e:	80 e0       	ldi	r24, 0x00	; 0
      80:	30 d3       	rcall	.+1632   	; 0x6e2 <rf12_setpower>

	for (;;)
	{
		send();
      82:	93 d0       	rcall	.+294    	; 0x1aa <send>
		for (unsigned char i=0; i<100; i++)
      84:	19 82       	std	Y+1, r1	; 0x01
      86:	75 c0       	rjmp	.+234    	; 0x172 <main+0x124>
      88:	80 e0       	ldi	r24, 0x00	; 0
      8a:	90 e0       	ldi	r25, 0x00	; 0
      8c:	a0 e2       	ldi	r26, 0x20	; 32
      8e:	b1 e4       	ldi	r27, 0x41	; 65
      90:	8a 83       	std	Y+2, r24	; 0x02
      92:	9b 83       	std	Y+3, r25	; 0x03
      94:	ac 83       	std	Y+4, r26	; 0x04
      96:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
      98:	20 e0       	ldi	r18, 0x00	; 0
      9a:	30 e0       	ldi	r19, 0x00	; 0
      9c:	4a ef       	ldi	r20, 0xFA	; 250
      9e:	54 e4       	ldi	r21, 0x44	; 68
      a0:	6a 81       	ldd	r22, Y+2	; 0x02
      a2:	7b 81       	ldd	r23, Y+3	; 0x03
      a4:	8c 81       	ldd	r24, Y+4	; 0x04
      a6:	9d 81       	ldd	r25, Y+5	; 0x05
      a8:	96 d5       	rcall	.+2860   	; 0xbd6 <__mulsf3>
      aa:	dc 01       	movw	r26, r24
      ac:	cb 01       	movw	r24, r22
      ae:	8e 83       	std	Y+6, r24	; 0x06
      b0:	9f 83       	std	Y+7, r25	; 0x07
      b2:	a8 87       	std	Y+8, r26	; 0x08
      b4:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
      b6:	20 e0       	ldi	r18, 0x00	; 0
      b8:	30 e0       	ldi	r19, 0x00	; 0
      ba:	40 e8       	ldi	r20, 0x80	; 128
      bc:	5f e3       	ldi	r21, 0x3F	; 63
      be:	6e 81       	ldd	r22, Y+6	; 0x06
      c0:	7f 81       	ldd	r23, Y+7	; 0x07
      c2:	88 85       	ldd	r24, Y+8	; 0x08
      c4:	99 85       	ldd	r25, Y+9	; 0x09
      c6:	59 d7       	rcall	.+3762   	; 0xf7a <__ltsf2>
      c8:	88 23       	and	r24, r24
      ca:	2c f4       	brge	.+10     	; 0xd6 <main+0x88>
		__ticks = 1;
      cc:	81 e0       	ldi	r24, 0x01	; 1
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	9b 87       	std	Y+11, r25	; 0x0b
      d2:	8a 87       	std	Y+10, r24	; 0x0a
      d4:	3e c0       	rjmp	.+124    	; 0x152 <main+0x104>
	else if (__tmp > 65535)
      d6:	20 e0       	ldi	r18, 0x00	; 0
      d8:	3f ef       	ldi	r19, 0xFF	; 255
      da:	4f e7       	ldi	r20, 0x7F	; 127
      dc:	57 e4       	ldi	r21, 0x47	; 71
      de:	6e 81       	ldd	r22, Y+6	; 0x06
      e0:	7f 81       	ldd	r23, Y+7	; 0x07
      e2:	88 85       	ldd	r24, Y+8	; 0x08
      e4:	99 85       	ldd	r25, Y+9	; 0x09
      e6:	f5 d6       	rcall	.+3562   	; 0xed2 <__gtsf2>
      e8:	18 16       	cp	r1, r24
      ea:	54 f5       	brge	.+84     	; 0x140 <main+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
      ec:	20 e0       	ldi	r18, 0x00	; 0
      ee:	30 e0       	ldi	r19, 0x00	; 0
      f0:	40 e2       	ldi	r20, 0x20	; 32
      f2:	51 e4       	ldi	r21, 0x41	; 65
      f4:	6a 81       	ldd	r22, Y+2	; 0x02
      f6:	7b 81       	ldd	r23, Y+3	; 0x03
      f8:	8c 81       	ldd	r24, Y+4	; 0x04
      fa:	9d 81       	ldd	r25, Y+5	; 0x05
      fc:	6c d5       	rcall	.+2776   	; 0xbd6 <__mulsf3>
      fe:	dc 01       	movw	r26, r24
     100:	cb 01       	movw	r24, r22
     102:	bc 01       	movw	r22, r24
     104:	cd 01       	movw	r24, r26
     106:	9e d3       	rcall	.+1852   	; 0x844 <__fixunssfsi>
     108:	dc 01       	movw	r26, r24
     10a:	cb 01       	movw	r24, r22
     10c:	9b 87       	std	Y+11, r25	; 0x0b
     10e:	8a 87       	std	Y+10, r24	; 0x0a
     110:	12 c0       	rjmp	.+36     	; 0x136 <main+0xe8>
     112:	88 ec       	ldi	r24, 0xC8	; 200
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	9d 87       	std	Y+13, r25	; 0x0d
     118:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     11a:	8c 85       	ldd	r24, Y+12	; 0x0c
     11c:	9d 85       	ldd	r25, Y+13	; 0x0d
     11e:	8c 01       	movw	r16, r24
     120:	c8 01       	movw	r24, r16
     122:	01 97       	sbiw	r24, 0x01	; 1
     124:	f1 f7       	brne	.-4      	; 0x122 <main+0xd4>
     126:	8c 01       	movw	r16, r24
     128:	1d 87       	std	Y+13, r17	; 0x0d
     12a:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     12c:	8a 85       	ldd	r24, Y+10	; 0x0a
     12e:	9b 85       	ldd	r25, Y+11	; 0x0b
     130:	01 97       	sbiw	r24, 0x01	; 1
     132:	9b 87       	std	Y+11, r25	; 0x0b
     134:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     136:	8a 85       	ldd	r24, Y+10	; 0x0a
     138:	9b 85       	ldd	r25, Y+11	; 0x0b
     13a:	00 97       	sbiw	r24, 0x00	; 0
     13c:	51 f7       	brne	.-44     	; 0x112 <main+0xc4>
     13e:	16 c0       	rjmp	.+44     	; 0x16c <main+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     140:	6e 81       	ldd	r22, Y+6	; 0x06
     142:	7f 81       	ldd	r23, Y+7	; 0x07
     144:	88 85       	ldd	r24, Y+8	; 0x08
     146:	99 85       	ldd	r25, Y+9	; 0x09
     148:	7d d3       	rcall	.+1786   	; 0x844 <__fixunssfsi>
     14a:	dc 01       	movw	r26, r24
     14c:	cb 01       	movw	r24, r22
     14e:	9b 87       	std	Y+11, r25	; 0x0b
     150:	8a 87       	std	Y+10, r24	; 0x0a
     152:	8a 85       	ldd	r24, Y+10	; 0x0a
     154:	9b 85       	ldd	r25, Y+11	; 0x0b
     156:	9f 87       	std	Y+15, r25	; 0x0f
     158:	8e 87       	std	Y+14, r24	; 0x0e
     15a:	8e 85       	ldd	r24, Y+14	; 0x0e
     15c:	9f 85       	ldd	r25, Y+15	; 0x0f
     15e:	8c 01       	movw	r16, r24
     160:	c8 01       	movw	r24, r16
     162:	01 97       	sbiw	r24, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <main+0x114>
     166:	8c 01       	movw	r16, r24
     168:	1f 87       	std	Y+15, r17	; 0x0f
     16a:	0e 87       	std	Y+14, r16	; 0x0e
     16c:	89 81       	ldd	r24, Y+1	; 0x01
     16e:	8f 5f       	subi	r24, 0xFF	; 255
     170:	89 83       	std	Y+1, r24	; 0x01
     172:	89 81       	ldd	r24, Y+1	; 0x01
     174:	84 36       	cpi	r24, 0x64	; 100
     176:	08 f4       	brcc	.+2      	; 0x17a <main+0x12c>
     178:	87 cf       	rjmp	.-242    	; 0x88 <main+0x3a>
			_delay_ms(10);

	//	receive();
	}
     17a:	83 cf       	rjmp	.-250    	; 0x82 <main+0x34>

0000017c <receive>:
}

void receive(void)
{	unsigned char test[32];	
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	cd b7       	in	r28, 0x3d	; 61
     182:	de b7       	in	r29, 0x3e	; 62
     184:	a0 97       	sbiw	r28, 0x20	; 32
     186:	0f b6       	in	r0, 0x3f	; 63
     188:	f8 94       	cli
     18a:	de bf       	out	0x3e, r29	; 62
     18c:	0f be       	out	0x3f, r0	; 63
     18e:	cd bf       	out	0x3d, r28	; 61
	rf12_rxdata(test,32);	
     190:	60 e2       	ldi	r22, 0x20	; 32
     192:	ce 01       	movw	r24, r28
     194:	01 96       	adiw	r24, 0x01	; 1
     196:	23 d3       	rcall	.+1606   	; 0x7de <rf12_rxdata>
	// daten verarbeiten
}
     198:	a0 96       	adiw	r28, 0x20	; 32
     19a:	0f b6       	in	r0, 0x3f	; 63
     19c:	f8 94       	cli
     19e:	de bf       	out	0x3e, r29	; 62
     1a0:	0f be       	out	0x3f, r0	; 63
     1a2:	cd bf       	out	0x3d, r28	; 61
     1a4:	df 91       	pop	r29
     1a6:	cf 91       	pop	r28
     1a8:	08 95       	ret

000001aa <send>:

void send(void)
{	unsigned char test[]="Dies ist ein 433MHz Test !!!\n   ";	
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	cd b7       	in	r28, 0x3d	; 61
     1b0:	de b7       	in	r29, 0x3e	; 62
     1b2:	a1 97       	sbiw	r28, 0x21	; 33
     1b4:	0f b6       	in	r0, 0x3f	; 63
     1b6:	f8 94       	cli
     1b8:	de bf       	out	0x3e, r29	; 62
     1ba:	0f be       	out	0x3f, r0	; 63
     1bc:	cd bf       	out	0x3d, r28	; 61
     1be:	21 e2       	ldi	r18, 0x21	; 33
     1c0:	e0 e6       	ldi	r30, 0x60	; 96
     1c2:	f0 e0       	ldi	r31, 0x00	; 0
     1c4:	ce 01       	movw	r24, r28
     1c6:	01 96       	adiw	r24, 0x01	; 1
     1c8:	dc 01       	movw	r26, r24
     1ca:	01 90       	ld	r0, Z+
     1cc:	0d 92       	st	X+, r0
     1ce:	2a 95       	dec	r18
     1d0:	e1 f7       	brne	.-8      	; 0x1ca <send+0x20>
	rf12_txdata(test,32);
     1d2:	60 e2       	ldi	r22, 0x20	; 32
     1d4:	ce 01       	movw	r24, r28
     1d6:	01 96       	adiw	r24, 0x01	; 1
     1d8:	bf d2       	rcall	.+1406   	; 0x758 <rf12_txdata>
}
     1da:	a1 96       	adiw	r28, 0x21	; 33
     1dc:	0f b6       	in	r0, 0x3f	; 63
     1de:	f8 94       	cli
     1e0:	de bf       	out	0x3e, r29	; 62
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	cd bf       	out	0x3d, r28	; 61
     1e6:	df 91       	pop	r29
     1e8:	cf 91       	pop	r28
     1ea:	08 95       	ret

000001ec <rf12_trans>:
#define SCK		5 // SCK
#define CS		2 // SS
#define SDO		4 // MISO

unsigned short rf12_trans(unsigned short wert)
{	unsigned short werti=0;
     1ec:	0f 93       	push	r16
     1ee:	1f 93       	push	r17
     1f0:	cf 93       	push	r28
     1f2:	df 93       	push	r29
     1f4:	cd b7       	in	r28, 0x3d	; 61
     1f6:	de b7       	in	r29, 0x3e	; 62
     1f8:	6d 97       	sbiw	r28, 0x1d	; 29
     1fa:	0f b6       	in	r0, 0x3f	; 63
     1fc:	f8 94       	cli
     1fe:	de bf       	out	0x3e, r29	; 62
     200:	0f be       	out	0x3f, r0	; 63
     202:	cd bf       	out	0x3d, r28	; 61
     204:	9d 8f       	std	Y+29, r25	; 0x1d
     206:	8c 8f       	std	Y+28, r24	; 0x1c
     208:	1a 82       	std	Y+2, r1	; 0x02
     20a:	19 82       	std	Y+1, r1	; 0x01
	unsigned char i;

	cbi(RF_PORT, CS);
     20c:	88 e3       	ldi	r24, 0x38	; 56
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	28 e3       	ldi	r18, 0x38	; 56
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	f9 01       	movw	r30, r18
     216:	20 81       	ld	r18, Z
     218:	2b 7f       	andi	r18, 0xFB	; 251
     21a:	fc 01       	movw	r30, r24
     21c:	20 83       	st	Z, r18
	for (i=0; i<16; i++)
     21e:	1b 82       	std	Y+3, r1	; 0x03
     220:	01 c1       	rjmp	.+514    	; 0x424 <rf12_trans+0x238>
	{	if (wert&32768)
     222:	8c 8d       	ldd	r24, Y+28	; 0x1c
     224:	9d 8d       	ldd	r25, Y+29	; 0x1d
     226:	99 23       	and	r25, r25
     228:	54 f4       	brge	.+20     	; 0x23e <rf12_trans+0x52>
			sbi(RF_PORT, SDI);
     22a:	88 e3       	ldi	r24, 0x38	; 56
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	28 e3       	ldi	r18, 0x38	; 56
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	f9 01       	movw	r30, r18
     234:	20 81       	ld	r18, Z
     236:	28 60       	ori	r18, 0x08	; 8
     238:	fc 01       	movw	r30, r24
     23a:	20 83       	st	Z, r18
     23c:	09 c0       	rjmp	.+18     	; 0x250 <rf12_trans+0x64>
		else
			cbi(RF_PORT, SDI);
     23e:	88 e3       	ldi	r24, 0x38	; 56
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	28 e3       	ldi	r18, 0x38	; 56
     244:	30 e0       	ldi	r19, 0x00	; 0
     246:	f9 01       	movw	r30, r18
     248:	20 81       	ld	r18, Z
     24a:	27 7f       	andi	r18, 0xF7	; 247
     24c:	fc 01       	movw	r30, r24
     24e:	20 83       	st	Z, r18
		werti<<=1;
     250:	89 81       	ldd	r24, Y+1	; 0x01
     252:	9a 81       	ldd	r25, Y+2	; 0x02
     254:	88 0f       	add	r24, r24
     256:	99 1f       	adc	r25, r25
     258:	9a 83       	std	Y+2, r25	; 0x02
     25a:	89 83       	std	Y+1, r24	; 0x01
		if (RF_PIN&(1<<SDO))
     25c:	86 e3       	ldi	r24, 0x36	; 54
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	fc 01       	movw	r30, r24
     262:	80 81       	ld	r24, Z
     264:	88 2f       	mov	r24, r24
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	80 71       	andi	r24, 0x10	; 16
     26a:	99 27       	eor	r25, r25
     26c:	00 97       	sbiw	r24, 0x00	; 0
     26e:	29 f0       	breq	.+10     	; 0x27a <rf12_trans+0x8e>
			werti|=1;
     270:	89 81       	ldd	r24, Y+1	; 0x01
     272:	9a 81       	ldd	r25, Y+2	; 0x02
     274:	81 60       	ori	r24, 0x01	; 1
     276:	9a 83       	std	Y+2, r25	; 0x02
     278:	89 83       	std	Y+1, r24	; 0x01
		sbi(RF_PORT, SCK);
     27a:	88 e3       	ldi	r24, 0x38	; 56
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	28 e3       	ldi	r18, 0x38	; 56
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	f9 01       	movw	r30, r18
     284:	20 81       	ld	r18, Z
     286:	20 62       	ori	r18, 0x20	; 32
     288:	fc 01       	movw	r30, r24
     28a:	20 83       	st	Z, r18
		wert<<=1;
     28c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     28e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     290:	88 0f       	add	r24, r24
     292:	99 1f       	adc	r25, r25
     294:	9d 8f       	std	Y+29, r25	; 0x1d
     296:	8c 8f       	std	Y+28, r24	; 0x1c
     298:	8a e9       	ldi	r24, 0x9A	; 154
     29a:	99 e9       	ldi	r25, 0x99	; 153
     29c:	a9 e9       	ldi	r26, 0x99	; 153
     29e:	be e3       	ldi	r27, 0x3E	; 62
     2a0:	8c 83       	std	Y+4, r24	; 0x04
     2a2:	9d 83       	std	Y+5, r25	; 0x05
     2a4:	ae 83       	std	Y+6, r26	; 0x06
     2a6:	bf 83       	std	Y+7, r27	; 0x07
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
     2a8:	2b ea       	ldi	r18, 0xAB	; 171
     2aa:	3a ea       	ldi	r19, 0xAA	; 170
     2ac:	4a e2       	ldi	r20, 0x2A	; 42
     2ae:	50 e4       	ldi	r21, 0x40	; 64
     2b0:	6c 81       	ldd	r22, Y+4	; 0x04
     2b2:	7d 81       	ldd	r23, Y+5	; 0x05
     2b4:	8e 81       	ldd	r24, Y+6	; 0x06
     2b6:	9f 81       	ldd	r25, Y+7	; 0x07
     2b8:	8e d4       	rcall	.+2332   	; 0xbd6 <__mulsf3>
     2ba:	dc 01       	movw	r26, r24
     2bc:	cb 01       	movw	r24, r22
     2be:	88 87       	std	Y+8, r24	; 0x08
     2c0:	99 87       	std	Y+9, r25	; 0x09
     2c2:	aa 87       	std	Y+10, r26	; 0x0a
     2c4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     2c6:	20 e0       	ldi	r18, 0x00	; 0
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	40 e8       	ldi	r20, 0x80	; 128
     2cc:	5f e3       	ldi	r21, 0x3F	; 63
     2ce:	68 85       	ldd	r22, Y+8	; 0x08
     2d0:	79 85       	ldd	r23, Y+9	; 0x09
     2d2:	8a 85       	ldd	r24, Y+10	; 0x0a
     2d4:	9b 85       	ldd	r25, Y+11	; 0x0b
     2d6:	51 d6       	rcall	.+3234   	; 0xf7a <__ltsf2>
     2d8:	88 23       	and	r24, r24
     2da:	1c f4       	brge	.+6      	; 0x2e2 <rf12_trans+0xf6>
		__ticks = 1;
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	8c 87       	std	Y+12, r24	; 0x0c
     2e0:	8e c0       	rjmp	.+284    	; 0x3fe <rf12_trans+0x212>
	else if (__tmp > 255)
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	4f e7       	ldi	r20, 0x7F	; 127
     2e8:	53 e4       	ldi	r21, 0x43	; 67
     2ea:	68 85       	ldd	r22, Y+8	; 0x08
     2ec:	79 85       	ldd	r23, Y+9	; 0x09
     2ee:	8a 85       	ldd	r24, Y+10	; 0x0a
     2f0:	9b 85       	ldd	r25, Y+11	; 0x0b
     2f2:	ef d5       	rcall	.+3038   	; 0xed2 <__gtsf2>
     2f4:	18 16       	cp	r1, r24
     2f6:	0c f0       	brlt	.+2      	; 0x2fa <rf12_trans+0x10e>
     2f8:	7a c0       	rjmp	.+244    	; 0x3ee <rf12_trans+0x202>
	{
		_delay_ms(__us / 1000.0);
     2fa:	20 e0       	ldi	r18, 0x00	; 0
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	4a e7       	ldi	r20, 0x7A	; 122
     300:	54 e4       	ldi	r21, 0x44	; 68
     302:	6c 81       	ldd	r22, Y+4	; 0x04
     304:	7d 81       	ldd	r23, Y+5	; 0x05
     306:	8e 81       	ldd	r24, Y+6	; 0x06
     308:	9f 81       	ldd	r25, Y+7	; 0x07
     30a:	45 d5       	rcall	.+2698   	; 0xd96 <__divsf3>
     30c:	dc 01       	movw	r26, r24
     30e:	cb 01       	movw	r24, r22
     310:	8d 87       	std	Y+13, r24	; 0x0d
     312:	9e 87       	std	Y+14, r25	; 0x0e
     314:	af 87       	std	Y+15, r26	; 0x0f
     316:	b8 8b       	std	Y+16, r27	; 0x10
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     318:	20 e0       	ldi	r18, 0x00	; 0
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	4a ef       	ldi	r20, 0xFA	; 250
     31e:	54 e4       	ldi	r21, 0x44	; 68
     320:	6d 85       	ldd	r22, Y+13	; 0x0d
     322:	7e 85       	ldd	r23, Y+14	; 0x0e
     324:	8f 85       	ldd	r24, Y+15	; 0x0f
     326:	98 89       	ldd	r25, Y+16	; 0x10
     328:	56 d4       	rcall	.+2220   	; 0xbd6 <__mulsf3>
     32a:	dc 01       	movw	r26, r24
     32c:	cb 01       	movw	r24, r22
     32e:	89 8b       	std	Y+17, r24	; 0x11
     330:	9a 8b       	std	Y+18, r25	; 0x12
     332:	ab 8b       	std	Y+19, r26	; 0x13
     334:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     336:	20 e0       	ldi	r18, 0x00	; 0
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	40 e8       	ldi	r20, 0x80	; 128
     33c:	5f e3       	ldi	r21, 0x3F	; 63
     33e:	69 89       	ldd	r22, Y+17	; 0x11
     340:	7a 89       	ldd	r23, Y+18	; 0x12
     342:	8b 89       	ldd	r24, Y+19	; 0x13
     344:	9c 89       	ldd	r25, Y+20	; 0x14
     346:	19 d6       	rcall	.+3122   	; 0xf7a <__ltsf2>
     348:	88 23       	and	r24, r24
     34a:	2c f4       	brge	.+10     	; 0x356 <rf12_trans+0x16a>
		__ticks = 1;
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	9e 8b       	std	Y+22, r25	; 0x16
     352:	8d 8b       	std	Y+21, r24	; 0x15
     354:	3e c0       	rjmp	.+124    	; 0x3d2 <rf12_trans+0x1e6>
	else if (__tmp > 65535)
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	3f ef       	ldi	r19, 0xFF	; 255
     35a:	4f e7       	ldi	r20, 0x7F	; 127
     35c:	57 e4       	ldi	r21, 0x47	; 71
     35e:	69 89       	ldd	r22, Y+17	; 0x11
     360:	7a 89       	ldd	r23, Y+18	; 0x12
     362:	8b 89       	ldd	r24, Y+19	; 0x13
     364:	9c 89       	ldd	r25, Y+20	; 0x14
     366:	b5 d5       	rcall	.+2922   	; 0xed2 <__gtsf2>
     368:	18 16       	cp	r1, r24
     36a:	54 f5       	brge	.+84     	; 0x3c0 <rf12_trans+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     36c:	20 e0       	ldi	r18, 0x00	; 0
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	40 e2       	ldi	r20, 0x20	; 32
     372:	51 e4       	ldi	r21, 0x41	; 65
     374:	6d 85       	ldd	r22, Y+13	; 0x0d
     376:	7e 85       	ldd	r23, Y+14	; 0x0e
     378:	8f 85       	ldd	r24, Y+15	; 0x0f
     37a:	98 89       	ldd	r25, Y+16	; 0x10
     37c:	2c d4       	rcall	.+2136   	; 0xbd6 <__mulsf3>
     37e:	dc 01       	movw	r26, r24
     380:	cb 01       	movw	r24, r22
     382:	bc 01       	movw	r22, r24
     384:	cd 01       	movw	r24, r26
     386:	5e d2       	rcall	.+1212   	; 0x844 <__fixunssfsi>
     388:	dc 01       	movw	r26, r24
     38a:	cb 01       	movw	r24, r22
     38c:	9e 8b       	std	Y+22, r25	; 0x16
     38e:	8d 8b       	std	Y+21, r24	; 0x15
     390:	12 c0       	rjmp	.+36     	; 0x3b6 <rf12_trans+0x1ca>
     392:	88 ec       	ldi	r24, 0xC8	; 200
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	98 8f       	std	Y+24, r25	; 0x18
     398:	8f 8b       	std	Y+23, r24	; 0x17
     39a:	8f 89       	ldd	r24, Y+23	; 0x17
     39c:	98 8d       	ldd	r25, Y+24	; 0x18
     39e:	8c 01       	movw	r16, r24
     3a0:	c8 01       	movw	r24, r16
     3a2:	01 97       	sbiw	r24, 0x01	; 1
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <rf12_trans+0x1b6>
     3a6:	8c 01       	movw	r16, r24
     3a8:	18 8f       	std	Y+24, r17	; 0x18
     3aa:	0f 8b       	std	Y+23, r16	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3ac:	8d 89       	ldd	r24, Y+21	; 0x15
     3ae:	9e 89       	ldd	r25, Y+22	; 0x16
     3b0:	01 97       	sbiw	r24, 0x01	; 1
     3b2:	9e 8b       	std	Y+22, r25	; 0x16
     3b4:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3b6:	8d 89       	ldd	r24, Y+21	; 0x15
     3b8:	9e 89       	ldd	r25, Y+22	; 0x16
     3ba:	00 97       	sbiw	r24, 0x00	; 0
     3bc:	51 f7       	brne	.-44     	; 0x392 <rf12_trans+0x1a6>
     3be:	26 c0       	rjmp	.+76     	; 0x40c <rf12_trans+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3c0:	69 89       	ldd	r22, Y+17	; 0x11
     3c2:	7a 89       	ldd	r23, Y+18	; 0x12
     3c4:	8b 89       	ldd	r24, Y+19	; 0x13
     3c6:	9c 89       	ldd	r25, Y+20	; 0x14
     3c8:	3d d2       	rcall	.+1146   	; 0x844 <__fixunssfsi>
     3ca:	dc 01       	movw	r26, r24
     3cc:	cb 01       	movw	r24, r22
     3ce:	9e 8b       	std	Y+22, r25	; 0x16
     3d0:	8d 8b       	std	Y+21, r24	; 0x15
     3d2:	8d 89       	ldd	r24, Y+21	; 0x15
     3d4:	9e 89       	ldd	r25, Y+22	; 0x16
     3d6:	9a 8f       	std	Y+26, r25	; 0x1a
     3d8:	89 8f       	std	Y+25, r24	; 0x19
     3da:	89 8d       	ldd	r24, Y+25	; 0x19
     3dc:	9a 8d       	ldd	r25, Y+26	; 0x1a
     3de:	8c 01       	movw	r16, r24
     3e0:	f8 01       	movw	r30, r16
     3e2:	31 97       	sbiw	r30, 0x01	; 1
     3e4:	f1 f7       	brne	.-4      	; 0x3e2 <rf12_trans+0x1f6>
     3e6:	8f 01       	movw	r16, r30
     3e8:	1a 8f       	std	Y+26, r17	; 0x1a
     3ea:	09 8f       	std	Y+25, r16	; 0x19
     3ec:	0f c0       	rjmp	.+30     	; 0x40c <rf12_trans+0x220>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     3ee:	68 85       	ldd	r22, Y+8	; 0x08
     3f0:	79 85       	ldd	r23, Y+9	; 0x09
     3f2:	8a 85       	ldd	r24, Y+10	; 0x0a
     3f4:	9b 85       	ldd	r25, Y+11	; 0x0b
     3f6:	26 d2       	rcall	.+1100   	; 0x844 <__fixunssfsi>
     3f8:	dc 01       	movw	r26, r24
     3fa:	cb 01       	movw	r24, r22
     3fc:	8c 87       	std	Y+12, r24	; 0x0c
     3fe:	8c 85       	ldd	r24, Y+12	; 0x0c
     400:	8b 8f       	std	Y+27, r24	; 0x1b
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     402:	8b 8d       	ldd	r24, Y+27	; 0x1b
     404:	18 2f       	mov	r17, r24
     406:	1a 95       	dec	r17
     408:	f1 f7       	brne	.-4      	; 0x406 <rf12_trans+0x21a>
     40a:	1b 8f       	std	Y+27, r17	; 0x1b
		_delay_us(0.3);
		cbi(RF_PORT, SCK);
     40c:	88 e3       	ldi	r24, 0x38	; 56
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	28 e3       	ldi	r18, 0x38	; 56
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	f9 01       	movw	r30, r18
     416:	20 81       	ld	r18, Z
     418:	2f 7d       	andi	r18, 0xDF	; 223
     41a:	fc 01       	movw	r30, r24
     41c:	20 83       	st	Z, r18
unsigned short rf12_trans(unsigned short wert)
{	unsigned short werti=0;
	unsigned char i;

	cbi(RF_PORT, CS);
	for (i=0; i<16; i++)
     41e:	8b 81       	ldd	r24, Y+3	; 0x03
     420:	8f 5f       	subi	r24, 0xFF	; 255
     422:	8b 83       	std	Y+3, r24	; 0x03
     424:	8b 81       	ldd	r24, Y+3	; 0x03
     426:	80 31       	cpi	r24, 0x10	; 16
     428:	08 f4       	brcc	.+2      	; 0x42c <rf12_trans+0x240>
     42a:	fb ce       	rjmp	.-522    	; 0x222 <rf12_trans+0x36>
		sbi(RF_PORT, SCK);
		wert<<=1;
		_delay_us(0.3);
		cbi(RF_PORT, SCK);
	}
	sbi(RF_PORT, CS);
     42c:	88 e3       	ldi	r24, 0x38	; 56
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	28 e3       	ldi	r18, 0x38	; 56
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	f9 01       	movw	r30, r18
     436:	20 81       	ld	r18, Z
     438:	24 60       	ori	r18, 0x04	; 4
     43a:	fc 01       	movw	r30, r24
     43c:	20 83       	st	Z, r18
	return werti;
     43e:	89 81       	ldd	r24, Y+1	; 0x01
     440:	9a 81       	ldd	r25, Y+2	; 0x02
}
     442:	6d 96       	adiw	r28, 0x1d	; 29
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	f8 94       	cli
     448:	de bf       	out	0x3e, r29	; 62
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	cd bf       	out	0x3d, r28	; 61
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	1f 91       	pop	r17
     454:	0f 91       	pop	r16
     456:	08 95       	ret

00000458 <rf12_init>:

void rf12_init(void)
{
     458:	0f 93       	push	r16
     45a:	1f 93       	push	r17
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	cd b7       	in	r28, 0x3d	; 61
     462:	de b7       	in	r29, 0x3e	; 62
     464:	2f 97       	sbiw	r28, 0x0f	; 15
     466:	0f b6       	in	r0, 0x3f	; 63
     468:	f8 94       	cli
     46a:	de bf       	out	0x3e, r29	; 62
     46c:	0f be       	out	0x3f, r0	; 63
     46e:	cd bf       	out	0x3d, r28	; 61
	RF_DDR=(1<<SDI)|(1<<SCK)|(1<<CS);
     470:	87 e3       	ldi	r24, 0x37	; 55
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	2c e2       	ldi	r18, 0x2C	; 44
     476:	fc 01       	movw	r30, r24
     478:	20 83       	st	Z, r18
	RF_PORT=(1<<CS);
     47a:	88 e3       	ldi	r24, 0x38	; 56
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	24 e0       	ldi	r18, 0x04	; 4
     480:	fc 01       	movw	r30, r24
     482:	20 83       	st	Z, r18

	for (unsigned char i=0; i<10; i++)
     484:	19 82       	std	Y+1, r1	; 0x01
     486:	75 c0       	rjmp	.+234    	; 0x572 <__stack+0x113>
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	a0 e2       	ldi	r26, 0x20	; 32
     48e:	b1 e4       	ldi	r27, 0x41	; 65
     490:	8a 83       	std	Y+2, r24	; 0x02
     492:	9b 83       	std	Y+3, r25	; 0x03
     494:	ac 83       	std	Y+4, r26	; 0x04
     496:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     498:	20 e0       	ldi	r18, 0x00	; 0
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	4a ef       	ldi	r20, 0xFA	; 250
     49e:	54 e4       	ldi	r21, 0x44	; 68
     4a0:	6a 81       	ldd	r22, Y+2	; 0x02
     4a2:	7b 81       	ldd	r23, Y+3	; 0x03
     4a4:	8c 81       	ldd	r24, Y+4	; 0x04
     4a6:	9d 81       	ldd	r25, Y+5	; 0x05
     4a8:	96 d3       	rcall	.+1836   	; 0xbd6 <__mulsf3>
     4aa:	dc 01       	movw	r26, r24
     4ac:	cb 01       	movw	r24, r22
     4ae:	8e 83       	std	Y+6, r24	; 0x06
     4b0:	9f 83       	std	Y+7, r25	; 0x07
     4b2:	a8 87       	std	Y+8, r26	; 0x08
     4b4:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     4b6:	20 e0       	ldi	r18, 0x00	; 0
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	40 e8       	ldi	r20, 0x80	; 128
     4bc:	5f e3       	ldi	r21, 0x3F	; 63
     4be:	6e 81       	ldd	r22, Y+6	; 0x06
     4c0:	7f 81       	ldd	r23, Y+7	; 0x07
     4c2:	88 85       	ldd	r24, Y+8	; 0x08
     4c4:	99 85       	ldd	r25, Y+9	; 0x09
     4c6:	59 d5       	rcall	.+2738   	; 0xf7a <__ltsf2>
     4c8:	88 23       	and	r24, r24
     4ca:	2c f4       	brge	.+10     	; 0x4d6 <__stack+0x77>
		__ticks = 1;
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	9b 87       	std	Y+11, r25	; 0x0b
     4d2:	8a 87       	std	Y+10, r24	; 0x0a
     4d4:	3e c0       	rjmp	.+124    	; 0x552 <__stack+0xf3>
	else if (__tmp > 65535)
     4d6:	20 e0       	ldi	r18, 0x00	; 0
     4d8:	3f ef       	ldi	r19, 0xFF	; 255
     4da:	4f e7       	ldi	r20, 0x7F	; 127
     4dc:	57 e4       	ldi	r21, 0x47	; 71
     4de:	6e 81       	ldd	r22, Y+6	; 0x06
     4e0:	7f 81       	ldd	r23, Y+7	; 0x07
     4e2:	88 85       	ldd	r24, Y+8	; 0x08
     4e4:	99 85       	ldd	r25, Y+9	; 0x09
     4e6:	f5 d4       	rcall	.+2538   	; 0xed2 <__gtsf2>
     4e8:	18 16       	cp	r1, r24
     4ea:	54 f5       	brge	.+84     	; 0x540 <__stack+0xe1>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4ec:	20 e0       	ldi	r18, 0x00	; 0
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	40 e2       	ldi	r20, 0x20	; 32
     4f2:	51 e4       	ldi	r21, 0x41	; 65
     4f4:	6a 81       	ldd	r22, Y+2	; 0x02
     4f6:	7b 81       	ldd	r23, Y+3	; 0x03
     4f8:	8c 81       	ldd	r24, Y+4	; 0x04
     4fa:	9d 81       	ldd	r25, Y+5	; 0x05
     4fc:	6c d3       	rcall	.+1752   	; 0xbd6 <__mulsf3>
     4fe:	dc 01       	movw	r26, r24
     500:	cb 01       	movw	r24, r22
     502:	bc 01       	movw	r22, r24
     504:	cd 01       	movw	r24, r26
     506:	9e d1       	rcall	.+828    	; 0x844 <__fixunssfsi>
     508:	dc 01       	movw	r26, r24
     50a:	cb 01       	movw	r24, r22
     50c:	9b 87       	std	Y+11, r25	; 0x0b
     50e:	8a 87       	std	Y+10, r24	; 0x0a
     510:	12 c0       	rjmp	.+36     	; 0x536 <__stack+0xd7>
     512:	88 ec       	ldi	r24, 0xC8	; 200
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	9d 87       	std	Y+13, r25	; 0x0d
     518:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     51a:	8c 85       	ldd	r24, Y+12	; 0x0c
     51c:	9d 85       	ldd	r25, Y+13	; 0x0d
     51e:	8c 01       	movw	r16, r24
     520:	c8 01       	movw	r24, r16
     522:	01 97       	sbiw	r24, 0x01	; 1
     524:	f1 f7       	brne	.-4      	; 0x522 <__stack+0xc3>
     526:	8c 01       	movw	r16, r24
     528:	1d 87       	std	Y+13, r17	; 0x0d
     52a:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     52c:	8a 85       	ldd	r24, Y+10	; 0x0a
     52e:	9b 85       	ldd	r25, Y+11	; 0x0b
     530:	01 97       	sbiw	r24, 0x01	; 1
     532:	9b 87       	std	Y+11, r25	; 0x0b
     534:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     536:	8a 85       	ldd	r24, Y+10	; 0x0a
     538:	9b 85       	ldd	r25, Y+11	; 0x0b
     53a:	00 97       	sbiw	r24, 0x00	; 0
     53c:	51 f7       	brne	.-44     	; 0x512 <__stack+0xb3>
     53e:	16 c0       	rjmp	.+44     	; 0x56c <__stack+0x10d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     540:	6e 81       	ldd	r22, Y+6	; 0x06
     542:	7f 81       	ldd	r23, Y+7	; 0x07
     544:	88 85       	ldd	r24, Y+8	; 0x08
     546:	99 85       	ldd	r25, Y+9	; 0x09
     548:	7d d1       	rcall	.+762    	; 0x844 <__fixunssfsi>
     54a:	dc 01       	movw	r26, r24
     54c:	cb 01       	movw	r24, r22
     54e:	9b 87       	std	Y+11, r25	; 0x0b
     550:	8a 87       	std	Y+10, r24	; 0x0a
     552:	8a 85       	ldd	r24, Y+10	; 0x0a
     554:	9b 85       	ldd	r25, Y+11	; 0x0b
     556:	9f 87       	std	Y+15, r25	; 0x0f
     558:	8e 87       	std	Y+14, r24	; 0x0e
     55a:	8e 85       	ldd	r24, Y+14	; 0x0e
     55c:	9f 85       	ldd	r25, Y+15	; 0x0f
     55e:	8c 01       	movw	r16, r24
     560:	f8 01       	movw	r30, r16
     562:	31 97       	sbiw	r30, 0x01	; 1
     564:	f1 f7       	brne	.-4      	; 0x562 <__stack+0x103>
     566:	8f 01       	movw	r16, r30
     568:	1f 87       	std	Y+15, r17	; 0x0f
     56a:	0e 87       	std	Y+14, r16	; 0x0e
     56c:	89 81       	ldd	r24, Y+1	; 0x01
     56e:	8f 5f       	subi	r24, 0xFF	; 255
     570:	89 83       	std	Y+1, r24	; 0x01
     572:	89 81       	ldd	r24, Y+1	; 0x01
     574:	8a 30       	cpi	r24, 0x0A	; 10
     576:	08 f4       	brcc	.+2      	; 0x57a <__stack+0x11b>
     578:	87 cf       	rjmp	.-242    	; 0x488 <__stack+0x29>
		_delay_ms(10);			// wait until POR done

	rf12_trans(0xC0E0);			// AVR CLK: 10MHz
     57a:	80 ee       	ldi	r24, 0xE0	; 224
     57c:	90 ec       	ldi	r25, 0xC0	; 192
     57e:	36 de       	rcall	.-916    	; 0x1ec <rf12_trans>
	rf12_trans(0x80D7);			// Enable FIFO
     580:	87 ed       	ldi	r24, 0xD7	; 215
     582:	90 e8       	ldi	r25, 0x80	; 128
     584:	33 de       	rcall	.-922    	; 0x1ec <rf12_trans>
	rf12_trans(0xC2AB);			// Data Filter: internal
     586:	8b ea       	ldi	r24, 0xAB	; 171
     588:	92 ec       	ldi	r25, 0xC2	; 194
     58a:	30 de       	rcall	.-928    	; 0x1ec <rf12_trans>
	rf12_trans(0xCA81);			// Set FIFO mode
     58c:	81 e8       	ldi	r24, 0x81	; 129
     58e:	9a ec       	ldi	r25, 0xCA	; 202
     590:	2d de       	rcall	.-934    	; 0x1ec <rf12_trans>
	rf12_trans(0xE000);			// disable wakeuptimer
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	90 ee       	ldi	r25, 0xE0	; 224
     596:	2a de       	rcall	.-940    	; 0x1ec <rf12_trans>
	rf12_trans(0xC800);			// disable low duty cycle
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	98 ec       	ldi	r25, 0xC8	; 200
     59c:	27 de       	rcall	.-946    	; 0x1ec <rf12_trans>
	rf12_trans(0xC4F7);			// AFC settings: autotuning: -10kHz...+7,5kHz
     59e:	87 ef       	ldi	r24, 0xF7	; 247
     5a0:	94 ec       	ldi	r25, 0xC4	; 196
     5a2:	24 de       	rcall	.-952    	; 0x1ec <rf12_trans>
}
     5a4:	2f 96       	adiw	r28, 0x0f	; 15
     5a6:	0f b6       	in	r0, 0x3f	; 63
     5a8:	f8 94       	cli
     5aa:	de bf       	out	0x3e, r29	; 62
     5ac:	0f be       	out	0x3f, r0	; 63
     5ae:	cd bf       	out	0x3d, r28	; 61
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	1f 91       	pop	r17
     5b6:	0f 91       	pop	r16
     5b8:	08 95       	ret

000005ba <rf12_setbandwidth>:

void rf12_setbandwidth(unsigned char bandwidth, unsigned char gain, unsigned char drssi)
{
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	00 d0       	rcall	.+0      	; 0x5c0 <rf12_setbandwidth+0x6>
     5c0:	1f 92       	push	r1
     5c2:	cd b7       	in	r28, 0x3d	; 61
     5c4:	de b7       	in	r29, 0x3e	; 62
     5c6:	89 83       	std	Y+1, r24	; 0x01
     5c8:	6a 83       	std	Y+2, r22	; 0x02
     5ca:	4b 83       	std	Y+3, r20	; 0x03
	rf12_trans(0x9400|((bandwidth&7)<<5)|((gain&3)<<3)|(drssi&7));
     5cc:	89 81       	ldd	r24, Y+1	; 0x01
     5ce:	88 2f       	mov	r24, r24
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	88 0f       	add	r24, r24
     5d4:	99 1f       	adc	r25, r25
     5d6:	82 95       	swap	r24
     5d8:	92 95       	swap	r25
     5da:	90 7f       	andi	r25, 0xF0	; 240
     5dc:	98 27       	eor	r25, r24
     5de:	80 7f       	andi	r24, 0xF0	; 240
     5e0:	98 27       	eor	r25, r24
     5e2:	9c 01       	movw	r18, r24
     5e4:	33 27       	eor	r19, r19
     5e6:	8a 81       	ldd	r24, Y+2	; 0x02
     5e8:	88 2f       	mov	r24, r24
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	83 70       	andi	r24, 0x03	; 3
     5ee:	99 27       	eor	r25, r25
     5f0:	88 0f       	add	r24, r24
     5f2:	99 1f       	adc	r25, r25
     5f4:	88 0f       	add	r24, r24
     5f6:	99 1f       	adc	r25, r25
     5f8:	88 0f       	add	r24, r24
     5fa:	99 1f       	adc	r25, r25
     5fc:	28 2b       	or	r18, r24
     5fe:	39 2b       	or	r19, r25
     600:	8b 81       	ldd	r24, Y+3	; 0x03
     602:	88 2f       	mov	r24, r24
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	87 70       	andi	r24, 0x07	; 7
     608:	99 27       	eor	r25, r25
     60a:	82 2b       	or	r24, r18
     60c:	93 2b       	or	r25, r19
     60e:	94 69       	ori	r25, 0x94	; 148
     610:	ed dd       	rcall	.-1062   	; 0x1ec <rf12_trans>
}
     612:	0f 90       	pop	r0
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	df 91       	pop	r29
     61a:	cf 91       	pop	r28
     61c:	08 95       	ret

0000061e <rf12_setfreq>:

void rf12_setfreq(unsigned short freq)
{	if (freq<96)				// 430,2400MHz
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	00 d0       	rcall	.+0      	; 0x624 <rf12_setfreq+0x6>
     624:	cd b7       	in	r28, 0x3d	; 61
     626:	de b7       	in	r29, 0x3e	; 62
     628:	9a 83       	std	Y+2, r25	; 0x02
     62a:	89 83       	std	Y+1, r24	; 0x01
     62c:	89 81       	ldd	r24, Y+1	; 0x01
     62e:	9a 81       	ldd	r25, Y+2	; 0x02
     630:	80 36       	cpi	r24, 0x60	; 96
     632:	91 05       	cpc	r25, r1
     634:	28 f4       	brcc	.+10     	; 0x640 <rf12_setfreq+0x22>
		freq=96;
     636:	80 e6       	ldi	r24, 0x60	; 96
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	9a 83       	std	Y+2, r25	; 0x02
     63c:	89 83       	std	Y+1, r24	; 0x01
     63e:	0a c0       	rjmp	.+20     	; 0x654 <rf12_setfreq+0x36>
	else if (freq>3903)			// 439,7575MHz
     640:	89 81       	ldd	r24, Y+1	; 0x01
     642:	9a 81       	ldd	r25, Y+2	; 0x02
     644:	80 34       	cpi	r24, 0x40	; 64
     646:	2f e0       	ldi	r18, 0x0F	; 15
     648:	92 07       	cpc	r25, r18
     64a:	20 f0       	brcs	.+8      	; 0x654 <rf12_setfreq+0x36>
		freq=3903;
     64c:	8f e3       	ldi	r24, 0x3F	; 63
     64e:	9f e0       	ldi	r25, 0x0F	; 15
     650:	9a 83       	std	Y+2, r25	; 0x02
     652:	89 83       	std	Y+1, r24	; 0x01
	rf12_trans(0xA000|freq);
     654:	89 81       	ldd	r24, Y+1	; 0x01
     656:	9a 81       	ldd	r25, Y+2	; 0x02
     658:	90 6a       	ori	r25, 0xA0	; 160
     65a:	c8 dd       	rcall	.-1136   	; 0x1ec <rf12_trans>
}
     65c:	0f 90       	pop	r0
     65e:	0f 90       	pop	r0
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	08 95       	ret

00000666 <rf12_setbaud>:

void rf12_setbaud(unsigned short baud)
{
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
     66a:	00 d0       	rcall	.+0      	; 0x66c <rf12_setbaud+0x6>
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62
     670:	9a 83       	std	Y+2, r25	; 0x02
     672:	89 83       	std	Y+1, r24	; 0x01
	if (baud<663)
     674:	89 81       	ldd	r24, Y+1	; 0x01
     676:	9a 81       	ldd	r25, Y+2	; 0x02
     678:	87 39       	cpi	r24, 0x97	; 151
     67a:	22 e0       	ldi	r18, 0x02	; 2
     67c:	92 07       	cpc	r25, r18
     67e:	58 f1       	brcs	.+86     	; 0x6d6 <rf12_setbaud+0x70>
		return;
	if (baud<5400)					// Baudrate= 344827,58621/(R+1)/(1+CS*7)
     680:	89 81       	ldd	r24, Y+1	; 0x01
     682:	9a 81       	ldd	r25, Y+2	; 0x02
     684:	88 31       	cpi	r24, 0x18	; 24
     686:	25 e1       	ldi	r18, 0x15	; 21
     688:	92 07       	cpc	r25, r18
     68a:	98 f4       	brcc	.+38     	; 0x6b2 <rf12_setbaud+0x4c>
		rf12_trans(0xC680|((43104/baud)-1));
     68c:	89 81       	ldd	r24, Y+1	; 0x01
     68e:	9a 81       	ldd	r25, Y+2	; 0x02
     690:	9c 01       	movw	r18, r24
     692:	40 e0       	ldi	r20, 0x00	; 0
     694:	50 e0       	ldi	r21, 0x00	; 0
     696:	80 e6       	ldi	r24, 0x60	; 96
     698:	98 ea       	ldi	r25, 0xA8	; 168
     69a:	a0 e0       	ldi	r26, 0x00	; 0
     69c:	b0 e0       	ldi	r27, 0x00	; 0
     69e:	bc 01       	movw	r22, r24
     6a0:	cd 01       	movw	r24, r26
     6a2:	94 d6       	rcall	.+3368   	; 0x13cc <__divmodsi4>
     6a4:	da 01       	movw	r26, r20
     6a6:	c9 01       	movw	r24, r18
     6a8:	01 97       	sbiw	r24, 0x01	; 1
     6aa:	80 68       	ori	r24, 0x80	; 128
     6ac:	96 6c       	ori	r25, 0xC6	; 198
     6ae:	9e dd       	rcall	.-1220   	; 0x1ec <rf12_trans>
     6b0:	13 c0       	rjmp	.+38     	; 0x6d8 <rf12_setbaud+0x72>
	else
		rf12_trans(0xC600|((344828UL/baud)-1));
     6b2:	89 81       	ldd	r24, Y+1	; 0x01
     6b4:	9a 81       	ldd	r25, Y+2	; 0x02
     6b6:	9c 01       	movw	r18, r24
     6b8:	40 e0       	ldi	r20, 0x00	; 0
     6ba:	50 e0       	ldi	r21, 0x00	; 0
     6bc:	8c ef       	ldi	r24, 0xFC	; 252
     6be:	92 e4       	ldi	r25, 0x42	; 66
     6c0:	a5 e0       	ldi	r26, 0x05	; 5
     6c2:	b0 e0       	ldi	r27, 0x00	; 0
     6c4:	bc 01       	movw	r22, r24
     6c6:	cd 01       	movw	r24, r26
     6c8:	5f d6       	rcall	.+3262   	; 0x1388 <__udivmodsi4>
     6ca:	da 01       	movw	r26, r20
     6cc:	c9 01       	movw	r24, r18
     6ce:	01 97       	sbiw	r24, 0x01	; 1
     6d0:	96 6c       	ori	r25, 0xC6	; 198
     6d2:	8c dd       	rcall	.-1256   	; 0x1ec <rf12_trans>
     6d4:	01 c0       	rjmp	.+2      	; 0x6d8 <rf12_setbaud+0x72>
}

void rf12_setbaud(unsigned short baud)
{
	if (baud<663)
		return;
     6d6:	00 00       	nop
	if (baud<5400)					// Baudrate= 344827,58621/(R+1)/(1+CS*7)
		rf12_trans(0xC680|((43104/baud)-1));
	else
		rf12_trans(0xC600|((344828UL/baud)-1));
}
     6d8:	0f 90       	pop	r0
     6da:	0f 90       	pop	r0
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	08 95       	ret

000006e2 <rf12_setpower>:

void rf12_setpower(unsigned char power, unsigned char mod)
{	
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	00 d0       	rcall	.+0      	; 0x6e8 <rf12_setpower+0x6>
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
     6ec:	89 83       	std	Y+1, r24	; 0x01
     6ee:	6a 83       	std	Y+2, r22	; 0x02
	rf12_trans(0x9800|(power&7)|((mod&15)<<4));
     6f0:	89 81       	ldd	r24, Y+1	; 0x01
     6f2:	88 2f       	mov	r24, r24
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	9c 01       	movw	r18, r24
     6f8:	27 70       	andi	r18, 0x07	; 7
     6fa:	33 27       	eor	r19, r19
     6fc:	8a 81       	ldd	r24, Y+2	; 0x02
     6fe:	88 2f       	mov	r24, r24
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	82 95       	swap	r24
     704:	92 95       	swap	r25
     706:	90 7f       	andi	r25, 0xF0	; 240
     708:	98 27       	eor	r25, r24
     70a:	80 7f       	andi	r24, 0xF0	; 240
     70c:	98 27       	eor	r25, r24
     70e:	99 27       	eor	r25, r25
     710:	82 2b       	or	r24, r18
     712:	93 2b       	or	r25, r19
     714:	98 69       	ori	r25, 0x98	; 152
     716:	6a dd       	rcall	.-1324   	; 0x1ec <rf12_trans>
}
     718:	0f 90       	pop	r0
     71a:	0f 90       	pop	r0
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	08 95       	ret

00000722 <rf12_ready>:

void rf12_ready(void)
{	cbi(RF_PORT, CS);
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	cd b7       	in	r28, 0x3d	; 61
     728:	de b7       	in	r29, 0x3e	; 62
     72a:	88 e3       	ldi	r24, 0x38	; 56
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	28 e3       	ldi	r18, 0x38	; 56
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	f9 01       	movw	r30, r18
     734:	20 81       	ld	r18, Z
     736:	2b 7f       	andi	r18, 0xFB	; 251
     738:	fc 01       	movw	r30, r24
     73a:	20 83       	st	Z, r18
	while (!(RF_PIN&(1<<SDO))); // wait until FIFO ready
     73c:	00 00       	nop
     73e:	86 e3       	ldi	r24, 0x36	; 54
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	fc 01       	movw	r30, r24
     744:	80 81       	ld	r24, Z
     746:	88 2f       	mov	r24, r24
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	80 71       	andi	r24, 0x10	; 16
     74c:	99 27       	eor	r25, r25
     74e:	00 97       	sbiw	r24, 0x00	; 0
     750:	b1 f3       	breq	.-20     	; 0x73e <rf12_ready+0x1c>
}
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	08 95       	ret

00000758 <rf12_txdata>:

void rf12_txdata(unsigned char *data, unsigned char number)
{	unsigned char i;
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
     75c:	00 d0       	rcall	.+0      	; 0x75e <rf12_txdata+0x6>
     75e:	00 d0       	rcall	.+0      	; 0x760 <rf12_txdata+0x8>
     760:	cd b7       	in	r28, 0x3d	; 61
     762:	de b7       	in	r29, 0x3e	; 62
     764:	9b 83       	std	Y+3, r25	; 0x03
     766:	8a 83       	std	Y+2, r24	; 0x02
     768:	6c 83       	std	Y+4, r22	; 0x04
	rf12_trans(0x8238);			// TX on
     76a:	88 e3       	ldi	r24, 0x38	; 56
     76c:	92 e8       	ldi	r25, 0x82	; 130
     76e:	3e dd       	rcall	.-1412   	; 0x1ec <rf12_trans>
	rf12_ready();
     770:	d8 df       	rcall	.-80     	; 0x722 <rf12_ready>
	rf12_trans(0xB8AA);
     772:	8a ea       	ldi	r24, 0xAA	; 170
     774:	98 eb       	ldi	r25, 0xB8	; 184
     776:	3a dd       	rcall	.-1420   	; 0x1ec <rf12_trans>
	rf12_ready();
     778:	d4 df       	rcall	.-88     	; 0x722 <rf12_ready>
	rf12_trans(0xB8AA);
     77a:	8a ea       	ldi	r24, 0xAA	; 170
     77c:	98 eb       	ldi	r25, 0xB8	; 184
     77e:	36 dd       	rcall	.-1428   	; 0x1ec <rf12_trans>
	rf12_ready();
     780:	d0 df       	rcall	.-96     	; 0x722 <rf12_ready>
	rf12_trans(0xB8AA);
     782:	8a ea       	ldi	r24, 0xAA	; 170
     784:	98 eb       	ldi	r25, 0xB8	; 184
     786:	32 dd       	rcall	.-1436   	; 0x1ec <rf12_trans>
	rf12_ready();
     788:	cc df       	rcall	.-104    	; 0x722 <rf12_ready>
	rf12_trans(0xB82D);
     78a:	8d e2       	ldi	r24, 0x2D	; 45
     78c:	98 eb       	ldi	r25, 0xB8	; 184
     78e:	2e dd       	rcall	.-1444   	; 0x1ec <rf12_trans>
	rf12_ready();
     790:	c8 df       	rcall	.-112    	; 0x722 <rf12_ready>
	rf12_trans(0xB8D4);
     792:	84 ed       	ldi	r24, 0xD4	; 212
     794:	98 eb       	ldi	r25, 0xB8	; 184
     796:	2a dd       	rcall	.-1452   	; 0x1ec <rf12_trans>
	for (i=0; i<number; i++)
     798:	19 82       	std	Y+1, r1	; 0x01
     79a:	12 c0       	rjmp	.+36     	; 0x7c0 <rf12_txdata+0x68>
	{		rf12_ready();
     79c:	c2 df       	rcall	.-124    	; 0x722 <rf12_ready>
		rf12_trans(0xB800|(*data++));
     79e:	8a 81       	ldd	r24, Y+2	; 0x02
     7a0:	9b 81       	ldd	r25, Y+3	; 0x03
     7a2:	fc 01       	movw	r30, r24
     7a4:	80 81       	ld	r24, Z
     7a6:	88 2f       	mov	r24, r24
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	98 6b       	ori	r25, 0xB8	; 184
     7ac:	2a 81       	ldd	r18, Y+2	; 0x02
     7ae:	3b 81       	ldd	r19, Y+3	; 0x03
     7b0:	2f 5f       	subi	r18, 0xFF	; 255
     7b2:	3f 4f       	sbci	r19, 0xFF	; 255
     7b4:	3b 83       	std	Y+3, r19	; 0x03
     7b6:	2a 83       	std	Y+2, r18	; 0x02
     7b8:	19 dd       	rcall	.-1486   	; 0x1ec <rf12_trans>
	rf12_trans(0xB8AA);
	rf12_ready();
	rf12_trans(0xB82D);
	rf12_ready();
	rf12_trans(0xB8D4);
	for (i=0; i<number; i++)
     7ba:	89 81       	ldd	r24, Y+1	; 0x01
     7bc:	8f 5f       	subi	r24, 0xFF	; 255
     7be:	89 83       	std	Y+1, r24	; 0x01
     7c0:	99 81       	ldd	r25, Y+1	; 0x01
     7c2:	8c 81       	ldd	r24, Y+4	; 0x04
     7c4:	98 17       	cp	r25, r24
     7c6:	50 f3       	brcs	.-44     	; 0x79c <rf12_txdata+0x44>
	{		rf12_ready();
		rf12_trans(0xB800|(*data++));
	}
	rf12_ready();
     7c8:	ac df       	rcall	.-168    	; 0x722 <rf12_ready>
	rf12_trans(0x8208);			// TX off
     7ca:	88 e0       	ldi	r24, 0x08	; 8
     7cc:	92 e8       	ldi	r25, 0x82	; 130
     7ce:	0e dd       	rcall	.-1508   	; 0x1ec <rf12_trans>
}
     7d0:	0f 90       	pop	r0
     7d2:	0f 90       	pop	r0
     7d4:	0f 90       	pop	r0
     7d6:	0f 90       	pop	r0
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <rf12_rxdata>:

void rf12_rxdata(unsigned char *data, unsigned char number)
{	unsigned char i;
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	00 d0       	rcall	.+0      	; 0x7e4 <rf12_rxdata+0x6>
     7e4:	00 d0       	rcall	.+0      	; 0x7e6 <rf12_rxdata+0x8>
     7e6:	cd b7       	in	r28, 0x3d	; 61
     7e8:	de b7       	in	r29, 0x3e	; 62
     7ea:	9b 83       	std	Y+3, r25	; 0x03
     7ec:	8a 83       	std	Y+2, r24	; 0x02
     7ee:	6c 83       	std	Y+4, r22	; 0x04
	rf12_trans(0x82C8);			// RX on
     7f0:	88 ec       	ldi	r24, 0xC8	; 200
     7f2:	92 e8       	ldi	r25, 0x82	; 130
     7f4:	fb dc       	rcall	.-1546   	; 0x1ec <rf12_trans>
	rf12_trans(0xCA81);			// set FIFO mode
     7f6:	81 e8       	ldi	r24, 0x81	; 129
     7f8:	9a ec       	ldi	r25, 0xCA	; 202
     7fa:	f8 dc       	rcall	.-1552   	; 0x1ec <rf12_trans>
	rf12_trans(0xCA83);			// enable FIFO
     7fc:	83 e8       	ldi	r24, 0x83	; 131
     7fe:	9a ec       	ldi	r25, 0xCA	; 202
     800:	f5 dc       	rcall	.-1558   	; 0x1ec <rf12_trans>
	for (i=0; i<number; i++)
     802:	19 82       	std	Y+1, r1	; 0x01
     804:	11 c0       	rjmp	.+34     	; 0x828 <rf12_rxdata+0x4a>
	{	rf12_ready();
     806:	8d df       	rcall	.-230    	; 0x722 <rf12_ready>
		*data++=rf12_trans(0xB000);
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	90 eb       	ldi	r25, 0xB0	; 176
     80c:	ef dc       	rcall	.-1570   	; 0x1ec <rf12_trans>
     80e:	28 2f       	mov	r18, r24
     810:	8a 81       	ldd	r24, Y+2	; 0x02
     812:	9b 81       	ldd	r25, Y+3	; 0x03
     814:	fc 01       	movw	r30, r24
     816:	20 83       	st	Z, r18
     818:	8a 81       	ldd	r24, Y+2	; 0x02
     81a:	9b 81       	ldd	r25, Y+3	; 0x03
     81c:	01 96       	adiw	r24, 0x01	; 1
     81e:	9b 83       	std	Y+3, r25	; 0x03
     820:	8a 83       	std	Y+2, r24	; 0x02
void rf12_rxdata(unsigned char *data, unsigned char number)
{	unsigned char i;
	rf12_trans(0x82C8);			// RX on
	rf12_trans(0xCA81);			// set FIFO mode
	rf12_trans(0xCA83);			// enable FIFO
	for (i=0; i<number; i++)
     822:	89 81       	ldd	r24, Y+1	; 0x01
     824:	8f 5f       	subi	r24, 0xFF	; 255
     826:	89 83       	std	Y+1, r24	; 0x01
     828:	99 81       	ldd	r25, Y+1	; 0x01
     82a:	8c 81       	ldd	r24, Y+4	; 0x04
     82c:	98 17       	cp	r25, r24
     82e:	58 f3       	brcs	.-42     	; 0x806 <rf12_rxdata+0x28>
	{	rf12_ready();
		*data++=rf12_trans(0xB000);
	}
	rf12_trans(0x8208);			// RX off
     830:	88 e0       	ldi	r24, 0x08	; 8
     832:	92 e8       	ldi	r25, 0x82	; 130
     834:	db dc       	rcall	.-1610   	; 0x1ec <rf12_trans>
}
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	08 95       	ret

00000844 <__fixunssfsi>:
     844:	cf 92       	push	r12
     846:	df 92       	push	r13
     848:	ef 92       	push	r14
     84a:	ff 92       	push	r15
     84c:	0f 93       	push	r16
     84e:	1f 93       	push	r17
     850:	6b 01       	movw	r12, r22
     852:	7c 01       	movw	r14, r24
     854:	20 e0       	ldi	r18, 0x00	; 0
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	40 e0       	ldi	r20, 0x00	; 0
     85a:	5f e4       	ldi	r21, 0x4F	; 79
     85c:	64 d3       	rcall	.+1736   	; 0xf26 <__gesf2>
     85e:	87 fd       	sbrc	r24, 7
     860:	0c c0       	rjmp	.+24     	; 0x87a <__fixunssfsi+0x36>
     862:	20 e0       	ldi	r18, 0x00	; 0
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	40 e0       	ldi	r20, 0x00	; 0
     868:	5f e4       	ldi	r21, 0x4F	; 79
     86a:	c7 01       	movw	r24, r14
     86c:	b6 01       	movw	r22, r12
     86e:	89 d1       	rcall	.+786    	; 0xb82 <__subsf3>
     870:	ae d3       	rcall	.+1884   	; 0xfce <__fixsfsi>
     872:	8b 01       	movw	r16, r22
     874:	9c 01       	movw	r18, r24
     876:	30 58       	subi	r19, 0x80	; 128
     878:	05 c0       	rjmp	.+10     	; 0x884 <__fixunssfsi+0x40>
     87a:	c7 01       	movw	r24, r14
     87c:	b6 01       	movw	r22, r12
     87e:	a7 d3       	rcall	.+1870   	; 0xfce <__fixsfsi>
     880:	8b 01       	movw	r16, r22
     882:	9c 01       	movw	r18, r24
     884:	b8 01       	movw	r22, r16
     886:	c9 01       	movw	r24, r18
     888:	1f 91       	pop	r17
     88a:	0f 91       	pop	r16
     88c:	ff 90       	pop	r15
     88e:	ef 90       	pop	r14
     890:	df 90       	pop	r13
     892:	cf 90       	pop	r12
     894:	08 95       	ret

00000896 <_fpadd_parts>:
     896:	a0 e0       	ldi	r26, 0x00	; 0
     898:	b0 e0       	ldi	r27, 0x00	; 0
     89a:	e0 e5       	ldi	r30, 0x50	; 80
     89c:	f4 e0       	ldi	r31, 0x04	; 4
     89e:	b5 c5       	rjmp	.+2922   	; 0x140a <__prologue_saves__+0x8>
     8a0:	3c 01       	movw	r6, r24
     8a2:	cb 01       	movw	r24, r22
     8a4:	ea 01       	movw	r28, r20
     8a6:	d3 01       	movw	r26, r6
     8a8:	2c 91       	ld	r18, X
     8aa:	22 30       	cpi	r18, 0x02	; 2
     8ac:	08 f4       	brcc	.+2      	; 0x8b0 <_fpadd_parts+0x1a>
     8ae:	3e c1       	rjmp	.+636    	; 0xb2c <_fpadd_parts+0x296>
     8b0:	fb 01       	movw	r30, r22
     8b2:	30 81       	ld	r19, Z
     8b4:	32 30       	cpi	r19, 0x02	; 2
     8b6:	08 f4       	brcc	.+2      	; 0x8ba <_fpadd_parts+0x24>
     8b8:	36 c1       	rjmp	.+620    	; 0xb26 <_fpadd_parts+0x290>
     8ba:	24 30       	cpi	r18, 0x04	; 4
     8bc:	71 f4       	brne	.+28     	; 0x8da <_fpadd_parts+0x44>
     8be:	34 30       	cpi	r19, 0x04	; 4
     8c0:	09 f0       	breq	.+2      	; 0x8c4 <_fpadd_parts+0x2e>
     8c2:	34 c1       	rjmp	.+616    	; 0xb2c <_fpadd_parts+0x296>
     8c4:	11 96       	adiw	r26, 0x01	; 1
     8c6:	2c 91       	ld	r18, X
     8c8:	81 81       	ldd	r24, Z+1	; 0x01
     8ca:	28 17       	cp	r18, r24
     8cc:	09 f4       	brne	.+2      	; 0x8d0 <_fpadd_parts+0x3a>
     8ce:	2e c1       	rjmp	.+604    	; 0xb2c <_fpadd_parts+0x296>
     8d0:	b1 e8       	ldi	r27, 0x81	; 129
     8d2:	6b 2e       	mov	r6, r27
     8d4:	b0 e0       	ldi	r27, 0x00	; 0
     8d6:	7b 2e       	mov	r7, r27
     8d8:	29 c1       	rjmp	.+594    	; 0xb2c <_fpadd_parts+0x296>
     8da:	34 30       	cpi	r19, 0x04	; 4
     8dc:	09 f4       	brne	.+2      	; 0x8e0 <_fpadd_parts+0x4a>
     8de:	23 c1       	rjmp	.+582    	; 0xb26 <_fpadd_parts+0x290>
     8e0:	32 30       	cpi	r19, 0x02	; 2
     8e2:	91 f4       	brne	.+36     	; 0x908 <_fpadd_parts+0x72>
     8e4:	22 30       	cpi	r18, 0x02	; 2
     8e6:	09 f0       	breq	.+2      	; 0x8ea <_fpadd_parts+0x54>
     8e8:	21 c1       	rjmp	.+578    	; 0xb2c <_fpadd_parts+0x296>
     8ea:	28 e0       	ldi	r18, 0x08	; 8
     8ec:	f3 01       	movw	r30, r6
     8ee:	da 01       	movw	r26, r20
     8f0:	01 90       	ld	r0, Z+
     8f2:	0d 92       	st	X+, r0
     8f4:	2a 95       	dec	r18
     8f6:	e1 f7       	brne	.-8      	; 0x8f0 <_fpadd_parts+0x5a>
     8f8:	db 01       	movw	r26, r22
     8fa:	11 96       	adiw	r26, 0x01	; 1
     8fc:	8c 91       	ld	r24, X
     8fe:	f3 01       	movw	r30, r6
     900:	91 81       	ldd	r25, Z+1	; 0x01
     902:	89 23       	and	r24, r25
     904:	89 83       	std	Y+1, r24	; 0x01
     906:	11 c1       	rjmp	.+546    	; 0xb2a <_fpadd_parts+0x294>
     908:	22 30       	cpi	r18, 0x02	; 2
     90a:	09 f4       	brne	.+2      	; 0x90e <_fpadd_parts+0x78>
     90c:	0c c1       	rjmp	.+536    	; 0xb26 <_fpadd_parts+0x290>
     90e:	d3 01       	movw	r26, r6
     910:	12 96       	adiw	r26, 0x02	; 2
     912:	ed 91       	ld	r30, X+
     914:	fc 91       	ld	r31, X
     916:	13 97       	sbiw	r26, 0x03	; 3
     918:	db 01       	movw	r26, r22
     91a:	12 96       	adiw	r26, 0x02	; 2
     91c:	6d 91       	ld	r22, X+
     91e:	7c 91       	ld	r23, X
     920:	13 97       	sbiw	r26, 0x03	; 3
     922:	d3 01       	movw	r26, r6
     924:	14 96       	adiw	r26, 0x04	; 4
     926:	0d 91       	ld	r16, X+
     928:	1d 91       	ld	r17, X+
     92a:	2d 91       	ld	r18, X+
     92c:	3c 91       	ld	r19, X
     92e:	17 97       	sbiw	r26, 0x07	; 7
     930:	dc 01       	movw	r26, r24
     932:	14 96       	adiw	r26, 0x04	; 4
     934:	cd 90       	ld	r12, X+
     936:	dd 90       	ld	r13, X+
     938:	ed 90       	ld	r14, X+
     93a:	fc 90       	ld	r15, X
     93c:	17 97       	sbiw	r26, 0x07	; 7
     93e:	af 01       	movw	r20, r30
     940:	46 1b       	sub	r20, r22
     942:	57 0b       	sbc	r21, r23
     944:	da 01       	movw	r26, r20
     946:	57 ff       	sbrs	r21, 7
     948:	04 c0       	rjmp	.+8      	; 0x952 <_fpadd_parts+0xbc>
     94a:	aa 27       	eor	r26, r26
     94c:	bb 27       	eor	r27, r27
     94e:	a4 1b       	sub	r26, r20
     950:	b5 0b       	sbc	r27, r21
     952:	a0 32       	cpi	r26, 0x20	; 32
     954:	b1 05       	cpc	r27, r1
     956:	0c f0       	brlt	.+2      	; 0x95a <_fpadd_parts+0xc4>
     958:	65 c0       	rjmp	.+202    	; 0xa24 <_fpadd_parts+0x18e>
     95a:	14 16       	cp	r1, r20
     95c:	15 06       	cpc	r1, r21
     95e:	7c f5       	brge	.+94     	; 0x9be <_fpadd_parts+0x128>
     960:	b7 01       	movw	r22, r14
     962:	a6 01       	movw	r20, r12
     964:	0a 2e       	mov	r0, r26
     966:	04 c0       	rjmp	.+8      	; 0x970 <_fpadd_parts+0xda>
     968:	76 95       	lsr	r23
     96a:	67 95       	ror	r22
     96c:	57 95       	ror	r21
     96e:	47 95       	ror	r20
     970:	0a 94       	dec	r0
     972:	d2 f7       	brpl	.-12     	; 0x968 <_fpadd_parts+0xd2>
     974:	81 2c       	mov	r8, r1
     976:	91 2c       	mov	r9, r1
     978:	54 01       	movw	r10, r8
     97a:	83 94       	inc	r8
     97c:	04 c0       	rjmp	.+8      	; 0x986 <_fpadd_parts+0xf0>
     97e:	88 0c       	add	r8, r8
     980:	99 1c       	adc	r9, r9
     982:	aa 1c       	adc	r10, r10
     984:	bb 1c       	adc	r11, r11
     986:	aa 95       	dec	r26
     988:	d2 f7       	brpl	.-12     	; 0x97e <_fpadd_parts+0xe8>
     98a:	b1 e0       	ldi	r27, 0x01	; 1
     98c:	8b 1a       	sub	r8, r27
     98e:	91 08       	sbc	r9, r1
     990:	a1 08       	sbc	r10, r1
     992:	b1 08       	sbc	r11, r1
     994:	8c 20       	and	r8, r12
     996:	9d 20       	and	r9, r13
     998:	ae 20       	and	r10, r14
     99a:	bf 20       	and	r11, r15
     99c:	c1 2c       	mov	r12, r1
     99e:	d1 2c       	mov	r13, r1
     9a0:	76 01       	movw	r14, r12
     9a2:	c3 94       	inc	r12
     9a4:	81 14       	cp	r8, r1
     9a6:	91 04       	cpc	r9, r1
     9a8:	a1 04       	cpc	r10, r1
     9aa:	b1 04       	cpc	r11, r1
     9ac:	19 f4       	brne	.+6      	; 0x9b4 <_fpadd_parts+0x11e>
     9ae:	c1 2c       	mov	r12, r1
     9b0:	d1 2c       	mov	r13, r1
     9b2:	76 01       	movw	r14, r12
     9b4:	c4 2a       	or	r12, r20
     9b6:	d5 2a       	or	r13, r21
     9b8:	e6 2a       	or	r14, r22
     9ba:	f7 2a       	or	r15, r23
     9bc:	3e c0       	rjmp	.+124    	; 0xa3a <_fpadd_parts+0x1a4>
     9be:	45 2b       	or	r20, r21
     9c0:	e1 f1       	breq	.+120    	; 0xa3a <_fpadd_parts+0x1a4>
     9c2:	ea 0f       	add	r30, r26
     9c4:	fb 1f       	adc	r31, r27
     9c6:	b9 01       	movw	r22, r18
     9c8:	a8 01       	movw	r20, r16
     9ca:	0a 2e       	mov	r0, r26
     9cc:	04 c0       	rjmp	.+8      	; 0x9d6 <_fpadd_parts+0x140>
     9ce:	76 95       	lsr	r23
     9d0:	67 95       	ror	r22
     9d2:	57 95       	ror	r21
     9d4:	47 95       	ror	r20
     9d6:	0a 94       	dec	r0
     9d8:	d2 f7       	brpl	.-12     	; 0x9ce <_fpadd_parts+0x138>
     9da:	81 2c       	mov	r8, r1
     9dc:	91 2c       	mov	r9, r1
     9de:	54 01       	movw	r10, r8
     9e0:	83 94       	inc	r8
     9e2:	04 c0       	rjmp	.+8      	; 0x9ec <_fpadd_parts+0x156>
     9e4:	88 0c       	add	r8, r8
     9e6:	99 1c       	adc	r9, r9
     9e8:	aa 1c       	adc	r10, r10
     9ea:	bb 1c       	adc	r11, r11
     9ec:	aa 95       	dec	r26
     9ee:	d2 f7       	brpl	.-12     	; 0x9e4 <_fpadd_parts+0x14e>
     9f0:	a1 e0       	ldi	r26, 0x01	; 1
     9f2:	8a 1a       	sub	r8, r26
     9f4:	91 08       	sbc	r9, r1
     9f6:	a1 08       	sbc	r10, r1
     9f8:	b1 08       	sbc	r11, r1
     9fa:	80 22       	and	r8, r16
     9fc:	91 22       	and	r9, r17
     9fe:	a2 22       	and	r10, r18
     a00:	b3 22       	and	r11, r19
     a02:	01 e0       	ldi	r16, 0x01	; 1
     a04:	10 e0       	ldi	r17, 0x00	; 0
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	81 14       	cp	r8, r1
     a0c:	91 04       	cpc	r9, r1
     a0e:	a1 04       	cpc	r10, r1
     a10:	b1 04       	cpc	r11, r1
     a12:	19 f4       	brne	.+6      	; 0xa1a <_fpadd_parts+0x184>
     a14:	00 e0       	ldi	r16, 0x00	; 0
     a16:	10 e0       	ldi	r17, 0x00	; 0
     a18:	98 01       	movw	r18, r16
     a1a:	04 2b       	or	r16, r20
     a1c:	15 2b       	or	r17, r21
     a1e:	26 2b       	or	r18, r22
     a20:	37 2b       	or	r19, r23
     a22:	0b c0       	rjmp	.+22     	; 0xa3a <_fpadd_parts+0x1a4>
     a24:	6e 17       	cp	r22, r30
     a26:	7f 07       	cpc	r23, r31
     a28:	24 f4       	brge	.+8      	; 0xa32 <_fpadd_parts+0x19c>
     a2a:	c1 2c       	mov	r12, r1
     a2c:	d1 2c       	mov	r13, r1
     a2e:	76 01       	movw	r14, r12
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <_fpadd_parts+0x1a4>
     a32:	fb 01       	movw	r30, r22
     a34:	00 e0       	ldi	r16, 0x00	; 0
     a36:	10 e0       	ldi	r17, 0x00	; 0
     a38:	98 01       	movw	r18, r16
     a3a:	d3 01       	movw	r26, r6
     a3c:	11 96       	adiw	r26, 0x01	; 1
     a3e:	4c 91       	ld	r20, X
     a40:	dc 01       	movw	r26, r24
     a42:	11 96       	adiw	r26, 0x01	; 1
     a44:	8c 91       	ld	r24, X
     a46:	48 17       	cp	r20, r24
     a48:	09 f4       	brne	.+2      	; 0xa4c <_fpadd_parts+0x1b6>
     a4a:	42 c0       	rjmp	.+132    	; 0xad0 <_fpadd_parts+0x23a>
     a4c:	44 23       	and	r20, r20
     a4e:	49 f0       	breq	.+18     	; 0xa62 <_fpadd_parts+0x1cc>
     a50:	d7 01       	movw	r26, r14
     a52:	c6 01       	movw	r24, r12
     a54:	80 1b       	sub	r24, r16
     a56:	91 0b       	sbc	r25, r17
     a58:	a2 0b       	sbc	r26, r18
     a5a:	b3 0b       	sbc	r27, r19
     a5c:	8c 01       	movw	r16, r24
     a5e:	9d 01       	movw	r18, r26
     a60:	04 c0       	rjmp	.+8      	; 0xa6a <_fpadd_parts+0x1d4>
     a62:	0c 19       	sub	r16, r12
     a64:	1d 09       	sbc	r17, r13
     a66:	2e 09       	sbc	r18, r14
     a68:	3f 09       	sbc	r19, r15
     a6a:	37 fd       	sbrc	r19, 7
     a6c:	04 c0       	rjmp	.+8      	; 0xa76 <_fpadd_parts+0x1e0>
     a6e:	19 82       	std	Y+1, r1	; 0x01
     a70:	fb 83       	std	Y+3, r31	; 0x03
     a72:	ea 83       	std	Y+2, r30	; 0x02
     a74:	0b c0       	rjmp	.+22     	; 0xa8c <_fpadd_parts+0x1f6>
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	89 83       	std	Y+1, r24	; 0x01
     a7a:	fb 83       	std	Y+3, r31	; 0x03
     a7c:	ea 83       	std	Y+2, r30	; 0x02
     a7e:	30 95       	com	r19
     a80:	20 95       	com	r18
     a82:	10 95       	com	r17
     a84:	01 95       	neg	r16
     a86:	1f 4f       	sbci	r17, 0xFF	; 255
     a88:	2f 4f       	sbci	r18, 0xFF	; 255
     a8a:	3f 4f       	sbci	r19, 0xFF	; 255
     a8c:	0c 83       	std	Y+4, r16	; 0x04
     a8e:	1d 83       	std	Y+5, r17	; 0x05
     a90:	2e 83       	std	Y+6, r18	; 0x06
     a92:	3f 83       	std	Y+7, r19	; 0x07
     a94:	0d c0       	rjmp	.+26     	; 0xab0 <_fpadd_parts+0x21a>
     a96:	88 0f       	add	r24, r24
     a98:	99 1f       	adc	r25, r25
     a9a:	aa 1f       	adc	r26, r26
     a9c:	bb 1f       	adc	r27, r27
     a9e:	8c 83       	std	Y+4, r24	; 0x04
     aa0:	9d 83       	std	Y+5, r25	; 0x05
     aa2:	ae 83       	std	Y+6, r26	; 0x06
     aa4:	bf 83       	std	Y+7, r27	; 0x07
     aa6:	8a 81       	ldd	r24, Y+2	; 0x02
     aa8:	9b 81       	ldd	r25, Y+3	; 0x03
     aaa:	01 97       	sbiw	r24, 0x01	; 1
     aac:	9b 83       	std	Y+3, r25	; 0x03
     aae:	8a 83       	std	Y+2, r24	; 0x02
     ab0:	8c 81       	ldd	r24, Y+4	; 0x04
     ab2:	9d 81       	ldd	r25, Y+5	; 0x05
     ab4:	ae 81       	ldd	r26, Y+6	; 0x06
     ab6:	bf 81       	ldd	r27, Y+7	; 0x07
     ab8:	8c 01       	movw	r16, r24
     aba:	9d 01       	movw	r18, r26
     abc:	01 50       	subi	r16, 0x01	; 1
     abe:	11 09       	sbc	r17, r1
     ac0:	21 09       	sbc	r18, r1
     ac2:	31 09       	sbc	r19, r1
     ac4:	0f 3f       	cpi	r16, 0xFF	; 255
     ac6:	1f 4f       	sbci	r17, 0xFF	; 255
     ac8:	2f 4f       	sbci	r18, 0xFF	; 255
     aca:	3f 43       	sbci	r19, 0x3F	; 63
     acc:	20 f3       	brcs	.-56     	; 0xa96 <_fpadd_parts+0x200>
     ace:	0b c0       	rjmp	.+22     	; 0xae6 <_fpadd_parts+0x250>
     ad0:	49 83       	std	Y+1, r20	; 0x01
     ad2:	fb 83       	std	Y+3, r31	; 0x03
     ad4:	ea 83       	std	Y+2, r30	; 0x02
     ad6:	0c 0d       	add	r16, r12
     ad8:	1d 1d       	adc	r17, r13
     ada:	2e 1d       	adc	r18, r14
     adc:	3f 1d       	adc	r19, r15
     ade:	0c 83       	std	Y+4, r16	; 0x04
     ae0:	1d 83       	std	Y+5, r17	; 0x05
     ae2:	2e 83       	std	Y+6, r18	; 0x06
     ae4:	3f 83       	std	Y+7, r19	; 0x07
     ae6:	83 e0       	ldi	r24, 0x03	; 3
     ae8:	88 83       	st	Y, r24
     aea:	0c 81       	ldd	r16, Y+4	; 0x04
     aec:	1d 81       	ldd	r17, Y+5	; 0x05
     aee:	2e 81       	ldd	r18, Y+6	; 0x06
     af0:	3f 81       	ldd	r19, Y+7	; 0x07
     af2:	37 ff       	sbrs	r19, 7
     af4:	1a c0       	rjmp	.+52     	; 0xb2a <_fpadd_parts+0x294>
     af6:	d9 01       	movw	r26, r18
     af8:	c8 01       	movw	r24, r16
     afa:	81 70       	andi	r24, 0x01	; 1
     afc:	99 27       	eor	r25, r25
     afe:	aa 27       	eor	r26, r26
     b00:	bb 27       	eor	r27, r27
     b02:	36 95       	lsr	r19
     b04:	27 95       	ror	r18
     b06:	17 95       	ror	r17
     b08:	07 95       	ror	r16
     b0a:	80 2b       	or	r24, r16
     b0c:	91 2b       	or	r25, r17
     b0e:	a2 2b       	or	r26, r18
     b10:	b3 2b       	or	r27, r19
     b12:	8c 83       	std	Y+4, r24	; 0x04
     b14:	9d 83       	std	Y+5, r25	; 0x05
     b16:	ae 83       	std	Y+6, r26	; 0x06
     b18:	bf 83       	std	Y+7, r27	; 0x07
     b1a:	8a 81       	ldd	r24, Y+2	; 0x02
     b1c:	9b 81       	ldd	r25, Y+3	; 0x03
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	9b 83       	std	Y+3, r25	; 0x03
     b22:	8a 83       	std	Y+2, r24	; 0x02
     b24:	02 c0       	rjmp	.+4      	; 0xb2a <_fpadd_parts+0x294>
     b26:	3c 01       	movw	r6, r24
     b28:	01 c0       	rjmp	.+2      	; 0xb2c <_fpadd_parts+0x296>
     b2a:	3e 01       	movw	r6, r28
     b2c:	c3 01       	movw	r24, r6
     b2e:	cd b7       	in	r28, 0x3d	; 61
     b30:	de b7       	in	r29, 0x3e	; 62
     b32:	ee e0       	ldi	r30, 0x0E	; 14
     b34:	86 c4       	rjmp	.+2316   	; 0x1442 <__epilogue_restores__+0x8>

00000b36 <__addsf3>:
     b36:	a0 e2       	ldi	r26, 0x20	; 32
     b38:	b0 e0       	ldi	r27, 0x00	; 0
     b3a:	e0 ea       	ldi	r30, 0xA0	; 160
     b3c:	f5 e0       	ldi	r31, 0x05	; 5
     b3e:	71 c4       	rjmp	.+2274   	; 0x1422 <__prologue_saves__+0x20>
     b40:	6d 8f       	std	Y+29, r22	; 0x1d
     b42:	7e 8f       	std	Y+30, r23	; 0x1e
     b44:	8f 8f       	std	Y+31, r24	; 0x1f
     b46:	98 a3       	std	Y+32, r25	; 0x20
     b48:	29 8f       	std	Y+25, r18	; 0x19
     b4a:	3a 8f       	std	Y+26, r19	; 0x1a
     b4c:	4b 8f       	std	Y+27, r20	; 0x1b
     b4e:	5c 8f       	std	Y+28, r21	; 0x1c
     b50:	be 01       	movw	r22, r28
     b52:	6f 5e       	subi	r22, 0xEF	; 239
     b54:	7f 4f       	sbci	r23, 0xFF	; 255
     b56:	ce 01       	movw	r24, r28
     b58:	4d 96       	adiw	r24, 0x1d	; 29
     b5a:	46 d3       	rcall	.+1676   	; 0x11e8 <__unpack_f>
     b5c:	be 01       	movw	r22, r28
     b5e:	67 5f       	subi	r22, 0xF7	; 247
     b60:	7f 4f       	sbci	r23, 0xFF	; 255
     b62:	ce 01       	movw	r24, r28
     b64:	49 96       	adiw	r24, 0x19	; 25
     b66:	40 d3       	rcall	.+1664   	; 0x11e8 <__unpack_f>
     b68:	ae 01       	movw	r20, r28
     b6a:	4f 5f       	subi	r20, 0xFF	; 255
     b6c:	5f 4f       	sbci	r21, 0xFF	; 255
     b6e:	be 01       	movw	r22, r28
     b70:	67 5f       	subi	r22, 0xF7	; 247
     b72:	7f 4f       	sbci	r23, 0xFF	; 255
     b74:	ce 01       	movw	r24, r28
     b76:	41 96       	adiw	r24, 0x11	; 17
     b78:	8e de       	rcall	.-740    	; 0x896 <_fpadd_parts>
     b7a:	75 d2       	rcall	.+1258   	; 0x1066 <__pack_f>
     b7c:	a0 96       	adiw	r28, 0x20	; 32
     b7e:	e2 e0       	ldi	r30, 0x02	; 2
     b80:	6c c4       	rjmp	.+2264   	; 0x145a <__epilogue_restores__+0x20>

00000b82 <__subsf3>:
     b82:	a0 e2       	ldi	r26, 0x20	; 32
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	e6 ec       	ldi	r30, 0xC6	; 198
     b88:	f5 e0       	ldi	r31, 0x05	; 5
     b8a:	4b c4       	rjmp	.+2198   	; 0x1422 <__prologue_saves__+0x20>
     b8c:	6d 8f       	std	Y+29, r22	; 0x1d
     b8e:	7e 8f       	std	Y+30, r23	; 0x1e
     b90:	8f 8f       	std	Y+31, r24	; 0x1f
     b92:	98 a3       	std	Y+32, r25	; 0x20
     b94:	29 8f       	std	Y+25, r18	; 0x19
     b96:	3a 8f       	std	Y+26, r19	; 0x1a
     b98:	4b 8f       	std	Y+27, r20	; 0x1b
     b9a:	5c 8f       	std	Y+28, r21	; 0x1c
     b9c:	be 01       	movw	r22, r28
     b9e:	6f 5e       	subi	r22, 0xEF	; 239
     ba0:	7f 4f       	sbci	r23, 0xFF	; 255
     ba2:	ce 01       	movw	r24, r28
     ba4:	4d 96       	adiw	r24, 0x1d	; 29
     ba6:	20 d3       	rcall	.+1600   	; 0x11e8 <__unpack_f>
     ba8:	be 01       	movw	r22, r28
     baa:	67 5f       	subi	r22, 0xF7	; 247
     bac:	7f 4f       	sbci	r23, 0xFF	; 255
     bae:	ce 01       	movw	r24, r28
     bb0:	49 96       	adiw	r24, 0x19	; 25
     bb2:	1a d3       	rcall	.+1588   	; 0x11e8 <__unpack_f>
     bb4:	8a 85       	ldd	r24, Y+10	; 0x0a
     bb6:	91 e0       	ldi	r25, 0x01	; 1
     bb8:	89 27       	eor	r24, r25
     bba:	8a 87       	std	Y+10, r24	; 0x0a
     bbc:	ae 01       	movw	r20, r28
     bbe:	4f 5f       	subi	r20, 0xFF	; 255
     bc0:	5f 4f       	sbci	r21, 0xFF	; 255
     bc2:	be 01       	movw	r22, r28
     bc4:	67 5f       	subi	r22, 0xF7	; 247
     bc6:	7f 4f       	sbci	r23, 0xFF	; 255
     bc8:	ce 01       	movw	r24, r28
     bca:	41 96       	adiw	r24, 0x11	; 17
     bcc:	64 de       	rcall	.-824    	; 0x896 <_fpadd_parts>
     bce:	4b d2       	rcall	.+1174   	; 0x1066 <__pack_f>
     bd0:	a0 96       	adiw	r28, 0x20	; 32
     bd2:	e2 e0       	ldi	r30, 0x02	; 2
     bd4:	42 c4       	rjmp	.+2180   	; 0x145a <__epilogue_restores__+0x20>

00000bd6 <__mulsf3>:
     bd6:	a0 e2       	ldi	r26, 0x20	; 32
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	e0 ef       	ldi	r30, 0xF0	; 240
     bdc:	f5 e0       	ldi	r31, 0x05	; 5
     bde:	13 c4       	rjmp	.+2086   	; 0x1406 <__prologue_saves__+0x4>
     be0:	6d 8f       	std	Y+29, r22	; 0x1d
     be2:	7e 8f       	std	Y+30, r23	; 0x1e
     be4:	8f 8f       	std	Y+31, r24	; 0x1f
     be6:	98 a3       	std	Y+32, r25	; 0x20
     be8:	29 8f       	std	Y+25, r18	; 0x19
     bea:	3a 8f       	std	Y+26, r19	; 0x1a
     bec:	4b 8f       	std	Y+27, r20	; 0x1b
     bee:	5c 8f       	std	Y+28, r21	; 0x1c
     bf0:	be 01       	movw	r22, r28
     bf2:	6f 5e       	subi	r22, 0xEF	; 239
     bf4:	7f 4f       	sbci	r23, 0xFF	; 255
     bf6:	ce 01       	movw	r24, r28
     bf8:	4d 96       	adiw	r24, 0x1d	; 29
     bfa:	f6 d2       	rcall	.+1516   	; 0x11e8 <__unpack_f>
     bfc:	be 01       	movw	r22, r28
     bfe:	67 5f       	subi	r22, 0xF7	; 247
     c00:	7f 4f       	sbci	r23, 0xFF	; 255
     c02:	ce 01       	movw	r24, r28
     c04:	49 96       	adiw	r24, 0x19	; 25
     c06:	f0 d2       	rcall	.+1504   	; 0x11e8 <__unpack_f>
     c08:	99 89       	ldd	r25, Y+17	; 0x11
     c0a:	92 30       	cpi	r25, 0x02	; 2
     c0c:	08 f4       	brcc	.+2      	; 0xc10 <__mulsf3+0x3a>
     c0e:	12 c0       	rjmp	.+36     	; 0xc34 <__mulsf3+0x5e>
     c10:	89 85       	ldd	r24, Y+9	; 0x09
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	08 f4       	brcc	.+2      	; 0xc18 <__mulsf3+0x42>
     c16:	1a c0       	rjmp	.+52     	; 0xc4c <__mulsf3+0x76>
     c18:	94 30       	cpi	r25, 0x04	; 4
     c1a:	21 f4       	brne	.+8      	; 0xc24 <__mulsf3+0x4e>
     c1c:	82 30       	cpi	r24, 0x02	; 2
     c1e:	09 f4       	brne	.+2      	; 0xc22 <__mulsf3+0x4c>
     c20:	b4 c0       	rjmp	.+360    	; 0xd8a <__mulsf3+0x1b4>
     c22:	08 c0       	rjmp	.+16     	; 0xc34 <__mulsf3+0x5e>
     c24:	84 30       	cpi	r24, 0x04	; 4
     c26:	21 f4       	brne	.+8      	; 0xc30 <__mulsf3+0x5a>
     c28:	92 30       	cpi	r25, 0x02	; 2
     c2a:	09 f4       	brne	.+2      	; 0xc2e <__mulsf3+0x58>
     c2c:	ae c0       	rjmp	.+348    	; 0xd8a <__mulsf3+0x1b4>
     c2e:	0e c0       	rjmp	.+28     	; 0xc4c <__mulsf3+0x76>
     c30:	92 30       	cpi	r25, 0x02	; 2
     c32:	51 f4       	brne	.+20     	; 0xc48 <__mulsf3+0x72>
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	2a 89       	ldd	r18, Y+18	; 0x12
     c38:	9a 85       	ldd	r25, Y+10	; 0x0a
     c3a:	29 13       	cpse	r18, r25
     c3c:	01 c0       	rjmp	.+2      	; 0xc40 <__mulsf3+0x6a>
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	8a 8b       	std	Y+18, r24	; 0x12
     c42:	ce 01       	movw	r24, r28
     c44:	41 96       	adiw	r24, 0x11	; 17
     c46:	a3 c0       	rjmp	.+326    	; 0xd8e <__mulsf3+0x1b8>
     c48:	82 30       	cpi	r24, 0x02	; 2
     c4a:	51 f4       	brne	.+20     	; 0xc60 <__mulsf3+0x8a>
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	2a 89       	ldd	r18, Y+18	; 0x12
     c50:	9a 85       	ldd	r25, Y+10	; 0x0a
     c52:	29 13       	cpse	r18, r25
     c54:	01 c0       	rjmp	.+2      	; 0xc58 <__mulsf3+0x82>
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	8a 87       	std	Y+10, r24	; 0x0a
     c5a:	ce 01       	movw	r24, r28
     c5c:	09 96       	adiw	r24, 0x09	; 9
     c5e:	97 c0       	rjmp	.+302    	; 0xd8e <__mulsf3+0x1b8>
     c60:	8d 88       	ldd	r8, Y+21	; 0x15
     c62:	9e 88       	ldd	r9, Y+22	; 0x16
     c64:	af 88       	ldd	r10, Y+23	; 0x17
     c66:	b8 8c       	ldd	r11, Y+24	; 0x18
     c68:	0d 85       	ldd	r16, Y+13	; 0x0d
     c6a:	1e 85       	ldd	r17, Y+14	; 0x0e
     c6c:	2f 85       	ldd	r18, Y+15	; 0x0f
     c6e:	38 89       	ldd	r19, Y+16	; 0x10
     c70:	e0 e2       	ldi	r30, 0x20	; 32
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	dc 01       	movw	r26, r24
     c7a:	c1 2c       	mov	r12, r1
     c7c:	d1 2c       	mov	r13, r1
     c7e:	76 01       	movw	r14, r12
     c80:	40 e0       	ldi	r20, 0x00	; 0
     c82:	50 e0       	ldi	r21, 0x00	; 0
     c84:	ba 01       	movw	r22, r20
     c86:	80 fe       	sbrs	r8, 0
     c88:	18 c0       	rjmp	.+48     	; 0xcba <__mulsf3+0xe4>
     c8a:	40 0f       	add	r20, r16
     c8c:	51 1f       	adc	r21, r17
     c8e:	62 1f       	adc	r22, r18
     c90:	73 1f       	adc	r23, r19
     c92:	8c 0d       	add	r24, r12
     c94:	9d 1d       	adc	r25, r13
     c96:	ae 1d       	adc	r26, r14
     c98:	bf 1d       	adc	r27, r15
     c9a:	41 2c       	mov	r4, r1
     c9c:	51 2c       	mov	r5, r1
     c9e:	32 01       	movw	r6, r4
     ca0:	43 94       	inc	r4
     ca2:	40 17       	cp	r20, r16
     ca4:	51 07       	cpc	r21, r17
     ca6:	62 07       	cpc	r22, r18
     ca8:	73 07       	cpc	r23, r19
     caa:	18 f0       	brcs	.+6      	; 0xcb2 <__mulsf3+0xdc>
     cac:	41 2c       	mov	r4, r1
     cae:	51 2c       	mov	r5, r1
     cb0:	32 01       	movw	r6, r4
     cb2:	84 0d       	add	r24, r4
     cb4:	95 1d       	adc	r25, r5
     cb6:	a6 1d       	adc	r26, r6
     cb8:	b7 1d       	adc	r27, r7
     cba:	cc 0c       	add	r12, r12
     cbc:	dd 1c       	adc	r13, r13
     cbe:	ee 1c       	adc	r14, r14
     cc0:	ff 1c       	adc	r15, r15
     cc2:	37 ff       	sbrs	r19, 7
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <__mulsf3+0xf4>
     cc6:	68 94       	set
     cc8:	c0 f8       	bld	r12, 0
     cca:	00 0f       	add	r16, r16
     ccc:	11 1f       	adc	r17, r17
     cce:	22 1f       	adc	r18, r18
     cd0:	33 1f       	adc	r19, r19
     cd2:	b6 94       	lsr	r11
     cd4:	a7 94       	ror	r10
     cd6:	97 94       	ror	r9
     cd8:	87 94       	ror	r8
     cda:	31 97       	sbiw	r30, 0x01	; 1
     cdc:	a1 f6       	brne	.-88     	; 0xc86 <__mulsf3+0xb0>
     cde:	2b 89       	ldd	r18, Y+19	; 0x13
     ce0:	3c 89       	ldd	r19, Y+20	; 0x14
     ce2:	eb 85       	ldd	r30, Y+11	; 0x0b
     ce4:	fc 85       	ldd	r31, Y+12	; 0x0c
     ce6:	2e 0f       	add	r18, r30
     ce8:	3f 1f       	adc	r19, r31
     cea:	2e 5f       	subi	r18, 0xFE	; 254
     cec:	3f 4f       	sbci	r19, 0xFF	; 255
     cee:	3c 83       	std	Y+4, r19	; 0x04
     cf0:	2b 83       	std	Y+3, r18	; 0x03
     cf2:	21 e0       	ldi	r18, 0x01	; 1
     cf4:	ea 89       	ldd	r30, Y+18	; 0x12
     cf6:	3a 85       	ldd	r19, Y+10	; 0x0a
     cf8:	e3 13       	cpse	r30, r19
     cfa:	01 c0       	rjmp	.+2      	; 0xcfe <__mulsf3+0x128>
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	2a 83       	std	Y+2, r18	; 0x02
     d00:	eb 81       	ldd	r30, Y+3	; 0x03
     d02:	fc 81       	ldd	r31, Y+4	; 0x04
     d04:	0c c0       	rjmp	.+24     	; 0xd1e <__mulsf3+0x148>
     d06:	80 ff       	sbrs	r24, 0
     d08:	05 c0       	rjmp	.+10     	; 0xd14 <__mulsf3+0x13e>
     d0a:	76 95       	lsr	r23
     d0c:	67 95       	ror	r22
     d0e:	57 95       	ror	r21
     d10:	47 95       	ror	r20
     d12:	70 68       	ori	r23, 0x80	; 128
     d14:	b6 95       	lsr	r27
     d16:	a7 95       	ror	r26
     d18:	97 95       	ror	r25
     d1a:	87 95       	ror	r24
     d1c:	31 96       	adiw	r30, 0x01	; 1
     d1e:	b7 fd       	sbrc	r27, 7
     d20:	f2 cf       	rjmp	.-28     	; 0xd06 <__mulsf3+0x130>
     d22:	9f 01       	movw	r18, r30
     d24:	0c c0       	rjmp	.+24     	; 0xd3e <__mulsf3+0x168>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	aa 1f       	adc	r26, r26
     d2c:	bb 1f       	adc	r27, r27
     d2e:	77 fd       	sbrc	r23, 7
     d30:	81 60       	ori	r24, 0x01	; 1
     d32:	44 0f       	add	r20, r20
     d34:	55 1f       	adc	r21, r21
     d36:	66 1f       	adc	r22, r22
     d38:	77 1f       	adc	r23, r23
     d3a:	21 50       	subi	r18, 0x01	; 1
     d3c:	31 09       	sbc	r19, r1
     d3e:	00 97       	sbiw	r24, 0x00	; 0
     d40:	a1 05       	cpc	r26, r1
     d42:	e0 e4       	ldi	r30, 0x40	; 64
     d44:	be 07       	cpc	r27, r30
     d46:	78 f3       	brcs	.-34     	; 0xd26 <__mulsf3+0x150>
     d48:	2b 83       	std	Y+3, r18	; 0x03
     d4a:	3c 83       	std	Y+4, r19	; 0x04
     d4c:	8c 01       	movw	r16, r24
     d4e:	9d 01       	movw	r18, r26
     d50:	0f 77       	andi	r16, 0x7F	; 127
     d52:	11 27       	eor	r17, r17
     d54:	22 27       	eor	r18, r18
     d56:	33 27       	eor	r19, r19
     d58:	00 34       	cpi	r16, 0x40	; 64
     d5a:	11 05       	cpc	r17, r1
     d5c:	21 05       	cpc	r18, r1
     d5e:	31 05       	cpc	r19, r1
     d60:	59 f4       	brne	.+22     	; 0xd78 <__mulsf3+0x1a2>
     d62:	87 fd       	sbrc	r24, 7
     d64:	09 c0       	rjmp	.+18     	; 0xd78 <__mulsf3+0x1a2>
     d66:	45 2b       	or	r20, r21
     d68:	46 2b       	or	r20, r22
     d6a:	47 2b       	or	r20, r23
     d6c:	29 f0       	breq	.+10     	; 0xd78 <__mulsf3+0x1a2>
     d6e:	80 5c       	subi	r24, 0xC0	; 192
     d70:	9f 4f       	sbci	r25, 0xFF	; 255
     d72:	af 4f       	sbci	r26, 0xFF	; 255
     d74:	bf 4f       	sbci	r27, 0xFF	; 255
     d76:	80 78       	andi	r24, 0x80	; 128
     d78:	8d 83       	std	Y+5, r24	; 0x05
     d7a:	9e 83       	std	Y+6, r25	; 0x06
     d7c:	af 83       	std	Y+7, r26	; 0x07
     d7e:	b8 87       	std	Y+8, r27	; 0x08
     d80:	83 e0       	ldi	r24, 0x03	; 3
     d82:	89 83       	std	Y+1, r24	; 0x01
     d84:	ce 01       	movw	r24, r28
     d86:	01 96       	adiw	r24, 0x01	; 1
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <__mulsf3+0x1b8>
     d8a:	81 e8       	ldi	r24, 0x81	; 129
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	6b d1       	rcall	.+726    	; 0x1066 <__pack_f>
     d90:	a0 96       	adiw	r28, 0x20	; 32
     d92:	e0 e1       	ldi	r30, 0x10	; 16
     d94:	54 c3       	rjmp	.+1704   	; 0x143e <__epilogue_restores__+0x4>

00000d96 <__divsf3>:
     d96:	a8 e1       	ldi	r26, 0x18	; 24
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	e0 ed       	ldi	r30, 0xD0	; 208
     d9c:	f6 e0       	ldi	r31, 0x06	; 6
     d9e:	3b c3       	rjmp	.+1654   	; 0x1416 <__prologue_saves__+0x14>
     da0:	6d 8b       	std	Y+21, r22	; 0x15
     da2:	7e 8b       	std	Y+22, r23	; 0x16
     da4:	8f 8b       	std	Y+23, r24	; 0x17
     da6:	98 8f       	std	Y+24, r25	; 0x18
     da8:	29 8b       	std	Y+17, r18	; 0x11
     daa:	3a 8b       	std	Y+18, r19	; 0x12
     dac:	4b 8b       	std	Y+19, r20	; 0x13
     dae:	5c 8b       	std	Y+20, r21	; 0x14
     db0:	be 01       	movw	r22, r28
     db2:	67 5f       	subi	r22, 0xF7	; 247
     db4:	7f 4f       	sbci	r23, 0xFF	; 255
     db6:	ce 01       	movw	r24, r28
     db8:	45 96       	adiw	r24, 0x15	; 21
     dba:	16 d2       	rcall	.+1068   	; 0x11e8 <__unpack_f>
     dbc:	be 01       	movw	r22, r28
     dbe:	6f 5f       	subi	r22, 0xFF	; 255
     dc0:	7f 4f       	sbci	r23, 0xFF	; 255
     dc2:	ce 01       	movw	r24, r28
     dc4:	41 96       	adiw	r24, 0x11	; 17
     dc6:	10 d2       	rcall	.+1056   	; 0x11e8 <__unpack_f>
     dc8:	99 85       	ldd	r25, Y+9	; 0x09
     dca:	92 30       	cpi	r25, 0x02	; 2
     dcc:	08 f4       	brcc	.+2      	; 0xdd0 <__divsf3+0x3a>
     dce:	75 c0       	rjmp	.+234    	; 0xeba <__divsf3+0x124>
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	82 30       	cpi	r24, 0x02	; 2
     dd4:	08 f4       	brcc	.+2      	; 0xdd8 <__divsf3+0x42>
     dd6:	74 c0       	rjmp	.+232    	; 0xec0 <__divsf3+0x12a>
     dd8:	2a 85       	ldd	r18, Y+10	; 0x0a
     dda:	3a 81       	ldd	r19, Y+2	; 0x02
     ddc:	23 27       	eor	r18, r19
     dde:	2a 87       	std	Y+10, r18	; 0x0a
     de0:	94 30       	cpi	r25, 0x04	; 4
     de2:	11 f0       	breq	.+4      	; 0xde8 <__divsf3+0x52>
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	19 f4       	brne	.+6      	; 0xdee <__divsf3+0x58>
     de8:	98 13       	cpse	r25, r24
     dea:	67 c0       	rjmp	.+206    	; 0xeba <__divsf3+0x124>
     dec:	6c c0       	rjmp	.+216    	; 0xec6 <__divsf3+0x130>
     dee:	84 30       	cpi	r24, 0x04	; 4
     df0:	39 f4       	brne	.+14     	; 0xe00 <__divsf3+0x6a>
     df2:	1d 86       	std	Y+13, r1	; 0x0d
     df4:	1e 86       	std	Y+14, r1	; 0x0e
     df6:	1f 86       	std	Y+15, r1	; 0x0f
     df8:	18 8a       	std	Y+16, r1	; 0x10
     dfa:	1c 86       	std	Y+12, r1	; 0x0c
     dfc:	1b 86       	std	Y+11, r1	; 0x0b
     dfe:	04 c0       	rjmp	.+8      	; 0xe08 <__divsf3+0x72>
     e00:	82 30       	cpi	r24, 0x02	; 2
     e02:	29 f4       	brne	.+10     	; 0xe0e <__divsf3+0x78>
     e04:	84 e0       	ldi	r24, 0x04	; 4
     e06:	89 87       	std	Y+9, r24	; 0x09
     e08:	ce 01       	movw	r24, r28
     e0a:	09 96       	adiw	r24, 0x09	; 9
     e0c:	5e c0       	rjmp	.+188    	; 0xeca <__divsf3+0x134>
     e0e:	8b 85       	ldd	r24, Y+11	; 0x0b
     e10:	9c 85       	ldd	r25, Y+12	; 0x0c
     e12:	2b 81       	ldd	r18, Y+3	; 0x03
     e14:	3c 81       	ldd	r19, Y+4	; 0x04
     e16:	82 1b       	sub	r24, r18
     e18:	93 0b       	sbc	r25, r19
     e1a:	9c 87       	std	Y+12, r25	; 0x0c
     e1c:	8b 87       	std	Y+11, r24	; 0x0b
     e1e:	4d 85       	ldd	r20, Y+13	; 0x0d
     e20:	5e 85       	ldd	r21, Y+14	; 0x0e
     e22:	6f 85       	ldd	r22, Y+15	; 0x0f
     e24:	78 89       	ldd	r23, Y+16	; 0x10
     e26:	cd 80       	ldd	r12, Y+5	; 0x05
     e28:	de 80       	ldd	r13, Y+6	; 0x06
     e2a:	ef 80       	ldd	r14, Y+7	; 0x07
     e2c:	f8 84       	ldd	r15, Y+8	; 0x08
     e2e:	4c 15       	cp	r20, r12
     e30:	5d 05       	cpc	r21, r13
     e32:	6e 05       	cpc	r22, r14
     e34:	7f 05       	cpc	r23, r15
     e36:	38 f4       	brcc	.+14     	; 0xe46 <__divsf3+0xb0>
     e38:	44 0f       	add	r20, r20
     e3a:	55 1f       	adc	r21, r21
     e3c:	66 1f       	adc	r22, r22
     e3e:	77 1f       	adc	r23, r23
     e40:	01 97       	sbiw	r24, 0x01	; 1
     e42:	9c 87       	std	Y+12, r25	; 0x0c
     e44:	8b 87       	std	Y+11, r24	; 0x0b
     e46:	ef e1       	ldi	r30, 0x1F	; 31
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	00 e0       	ldi	r16, 0x00	; 0
     e4c:	10 e0       	ldi	r17, 0x00	; 0
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e4       	ldi	r19, 0x40	; 64
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	dc 01       	movw	r26, r24
     e58:	4c 15       	cp	r20, r12
     e5a:	5d 05       	cpc	r21, r13
     e5c:	6e 05       	cpc	r22, r14
     e5e:	7f 05       	cpc	r23, r15
     e60:	40 f0       	brcs	.+16     	; 0xe72 <__divsf3+0xdc>
     e62:	80 2b       	or	r24, r16
     e64:	91 2b       	or	r25, r17
     e66:	a2 2b       	or	r26, r18
     e68:	b3 2b       	or	r27, r19
     e6a:	4c 19       	sub	r20, r12
     e6c:	5d 09       	sbc	r21, r13
     e6e:	6e 09       	sbc	r22, r14
     e70:	7f 09       	sbc	r23, r15
     e72:	36 95       	lsr	r19
     e74:	27 95       	ror	r18
     e76:	17 95       	ror	r17
     e78:	07 95       	ror	r16
     e7a:	44 0f       	add	r20, r20
     e7c:	55 1f       	adc	r21, r21
     e7e:	66 1f       	adc	r22, r22
     e80:	77 1f       	adc	r23, r23
     e82:	31 97       	sbiw	r30, 0x01	; 1
     e84:	49 f7       	brne	.-46     	; 0xe58 <__divsf3+0xc2>
     e86:	8c 01       	movw	r16, r24
     e88:	9d 01       	movw	r18, r26
     e8a:	0f 77       	andi	r16, 0x7F	; 127
     e8c:	11 27       	eor	r17, r17
     e8e:	22 27       	eor	r18, r18
     e90:	33 27       	eor	r19, r19
     e92:	00 34       	cpi	r16, 0x40	; 64
     e94:	11 05       	cpc	r17, r1
     e96:	21 05       	cpc	r18, r1
     e98:	31 05       	cpc	r19, r1
     e9a:	59 f4       	brne	.+22     	; 0xeb2 <__divsf3+0x11c>
     e9c:	87 fd       	sbrc	r24, 7
     e9e:	09 c0       	rjmp	.+18     	; 0xeb2 <__divsf3+0x11c>
     ea0:	45 2b       	or	r20, r21
     ea2:	46 2b       	or	r20, r22
     ea4:	47 2b       	or	r20, r23
     ea6:	29 f0       	breq	.+10     	; 0xeb2 <__divsf3+0x11c>
     ea8:	80 5c       	subi	r24, 0xC0	; 192
     eaa:	9f 4f       	sbci	r25, 0xFF	; 255
     eac:	af 4f       	sbci	r26, 0xFF	; 255
     eae:	bf 4f       	sbci	r27, 0xFF	; 255
     eb0:	80 78       	andi	r24, 0x80	; 128
     eb2:	8d 87       	std	Y+13, r24	; 0x0d
     eb4:	9e 87       	std	Y+14, r25	; 0x0e
     eb6:	af 87       	std	Y+15, r26	; 0x0f
     eb8:	b8 8b       	std	Y+16, r27	; 0x10
     eba:	ce 01       	movw	r24, r28
     ebc:	09 96       	adiw	r24, 0x09	; 9
     ebe:	05 c0       	rjmp	.+10     	; 0xeca <__divsf3+0x134>
     ec0:	ce 01       	movw	r24, r28
     ec2:	01 96       	adiw	r24, 0x01	; 1
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <__divsf3+0x134>
     ec6:	81 e8       	ldi	r24, 0x81	; 129
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	cd d0       	rcall	.+410    	; 0x1066 <__pack_f>
     ecc:	68 96       	adiw	r28, 0x18	; 24
     ece:	e8 e0       	ldi	r30, 0x08	; 8
     ed0:	be c2       	rjmp	.+1404   	; 0x144e <__epilogue_restores__+0x14>

00000ed2 <__gtsf2>:
     ed2:	a8 e1       	ldi	r26, 0x18	; 24
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	ee e6       	ldi	r30, 0x6E	; 110
     ed8:	f7 e0       	ldi	r31, 0x07	; 7
     eda:	a3 c2       	rjmp	.+1350   	; 0x1422 <__prologue_saves__+0x20>
     edc:	6d 8b       	std	Y+21, r22	; 0x15
     ede:	7e 8b       	std	Y+22, r23	; 0x16
     ee0:	8f 8b       	std	Y+23, r24	; 0x17
     ee2:	98 8f       	std	Y+24, r25	; 0x18
     ee4:	29 8b       	std	Y+17, r18	; 0x11
     ee6:	3a 8b       	std	Y+18, r19	; 0x12
     ee8:	4b 8b       	std	Y+19, r20	; 0x13
     eea:	5c 8b       	std	Y+20, r21	; 0x14
     eec:	be 01       	movw	r22, r28
     eee:	67 5f       	subi	r22, 0xF7	; 247
     ef0:	7f 4f       	sbci	r23, 0xFF	; 255
     ef2:	ce 01       	movw	r24, r28
     ef4:	45 96       	adiw	r24, 0x15	; 21
     ef6:	78 d1       	rcall	.+752    	; 0x11e8 <__unpack_f>
     ef8:	be 01       	movw	r22, r28
     efa:	6f 5f       	subi	r22, 0xFF	; 255
     efc:	7f 4f       	sbci	r23, 0xFF	; 255
     efe:	ce 01       	movw	r24, r28
     f00:	41 96       	adiw	r24, 0x11	; 17
     f02:	72 d1       	rcall	.+740    	; 0x11e8 <__unpack_f>
     f04:	89 85       	ldd	r24, Y+9	; 0x09
     f06:	82 30       	cpi	r24, 0x02	; 2
     f08:	50 f0       	brcs	.+20     	; 0xf1e <__gtsf2+0x4c>
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	82 30       	cpi	r24, 0x02	; 2
     f0e:	38 f0       	brcs	.+14     	; 0xf1e <__gtsf2+0x4c>
     f10:	be 01       	movw	r22, r28
     f12:	6f 5f       	subi	r22, 0xFF	; 255
     f14:	7f 4f       	sbci	r23, 0xFF	; 255
     f16:	ce 01       	movw	r24, r28
     f18:	09 96       	adiw	r24, 0x09	; 9
     f1a:	d5 d1       	rcall	.+938    	; 0x12c6 <__fpcmp_parts_f>
     f1c:	01 c0       	rjmp	.+2      	; 0xf20 <__gtsf2+0x4e>
     f1e:	8f ef       	ldi	r24, 0xFF	; 255
     f20:	68 96       	adiw	r28, 0x18	; 24
     f22:	e2 e0       	ldi	r30, 0x02	; 2
     f24:	9a c2       	rjmp	.+1332   	; 0x145a <__epilogue_restores__+0x20>

00000f26 <__gesf2>:
     f26:	a8 e1       	ldi	r26, 0x18	; 24
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e8 e9       	ldi	r30, 0x98	; 152
     f2c:	f7 e0       	ldi	r31, 0x07	; 7
     f2e:	79 c2       	rjmp	.+1266   	; 0x1422 <__prologue_saves__+0x20>
     f30:	6d 8b       	std	Y+21, r22	; 0x15
     f32:	7e 8b       	std	Y+22, r23	; 0x16
     f34:	8f 8b       	std	Y+23, r24	; 0x17
     f36:	98 8f       	std	Y+24, r25	; 0x18
     f38:	29 8b       	std	Y+17, r18	; 0x11
     f3a:	3a 8b       	std	Y+18, r19	; 0x12
     f3c:	4b 8b       	std	Y+19, r20	; 0x13
     f3e:	5c 8b       	std	Y+20, r21	; 0x14
     f40:	be 01       	movw	r22, r28
     f42:	67 5f       	subi	r22, 0xF7	; 247
     f44:	7f 4f       	sbci	r23, 0xFF	; 255
     f46:	ce 01       	movw	r24, r28
     f48:	45 96       	adiw	r24, 0x15	; 21
     f4a:	4e d1       	rcall	.+668    	; 0x11e8 <__unpack_f>
     f4c:	be 01       	movw	r22, r28
     f4e:	6f 5f       	subi	r22, 0xFF	; 255
     f50:	7f 4f       	sbci	r23, 0xFF	; 255
     f52:	ce 01       	movw	r24, r28
     f54:	41 96       	adiw	r24, 0x11	; 17
     f56:	48 d1       	rcall	.+656    	; 0x11e8 <__unpack_f>
     f58:	89 85       	ldd	r24, Y+9	; 0x09
     f5a:	82 30       	cpi	r24, 0x02	; 2
     f5c:	50 f0       	brcs	.+20     	; 0xf72 <__gesf2+0x4c>
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	82 30       	cpi	r24, 0x02	; 2
     f62:	38 f0       	brcs	.+14     	; 0xf72 <__gesf2+0x4c>
     f64:	be 01       	movw	r22, r28
     f66:	6f 5f       	subi	r22, 0xFF	; 255
     f68:	7f 4f       	sbci	r23, 0xFF	; 255
     f6a:	ce 01       	movw	r24, r28
     f6c:	09 96       	adiw	r24, 0x09	; 9
     f6e:	ab d1       	rcall	.+854    	; 0x12c6 <__fpcmp_parts_f>
     f70:	01 c0       	rjmp	.+2      	; 0xf74 <__gesf2+0x4e>
     f72:	8f ef       	ldi	r24, 0xFF	; 255
     f74:	68 96       	adiw	r28, 0x18	; 24
     f76:	e2 e0       	ldi	r30, 0x02	; 2
     f78:	70 c2       	rjmp	.+1248   	; 0x145a <__epilogue_restores__+0x20>

00000f7a <__ltsf2>:
     f7a:	a8 e1       	ldi	r26, 0x18	; 24
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e2 ec       	ldi	r30, 0xC2	; 194
     f80:	f7 e0       	ldi	r31, 0x07	; 7
     f82:	4f c2       	rjmp	.+1182   	; 0x1422 <__prologue_saves__+0x20>
     f84:	6d 8b       	std	Y+21, r22	; 0x15
     f86:	7e 8b       	std	Y+22, r23	; 0x16
     f88:	8f 8b       	std	Y+23, r24	; 0x17
     f8a:	98 8f       	std	Y+24, r25	; 0x18
     f8c:	29 8b       	std	Y+17, r18	; 0x11
     f8e:	3a 8b       	std	Y+18, r19	; 0x12
     f90:	4b 8b       	std	Y+19, r20	; 0x13
     f92:	5c 8b       	std	Y+20, r21	; 0x14
     f94:	be 01       	movw	r22, r28
     f96:	67 5f       	subi	r22, 0xF7	; 247
     f98:	7f 4f       	sbci	r23, 0xFF	; 255
     f9a:	ce 01       	movw	r24, r28
     f9c:	45 96       	adiw	r24, 0x15	; 21
     f9e:	24 d1       	rcall	.+584    	; 0x11e8 <__unpack_f>
     fa0:	be 01       	movw	r22, r28
     fa2:	6f 5f       	subi	r22, 0xFF	; 255
     fa4:	7f 4f       	sbci	r23, 0xFF	; 255
     fa6:	ce 01       	movw	r24, r28
     fa8:	41 96       	adiw	r24, 0x11	; 17
     faa:	1e d1       	rcall	.+572    	; 0x11e8 <__unpack_f>
     fac:	89 85       	ldd	r24, Y+9	; 0x09
     fae:	82 30       	cpi	r24, 0x02	; 2
     fb0:	50 f0       	brcs	.+20     	; 0xfc6 <__ltsf2+0x4c>
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	82 30       	cpi	r24, 0x02	; 2
     fb6:	38 f0       	brcs	.+14     	; 0xfc6 <__ltsf2+0x4c>
     fb8:	be 01       	movw	r22, r28
     fba:	6f 5f       	subi	r22, 0xFF	; 255
     fbc:	7f 4f       	sbci	r23, 0xFF	; 255
     fbe:	ce 01       	movw	r24, r28
     fc0:	09 96       	adiw	r24, 0x09	; 9
     fc2:	81 d1       	rcall	.+770    	; 0x12c6 <__fpcmp_parts_f>
     fc4:	01 c0       	rjmp	.+2      	; 0xfc8 <__ltsf2+0x4e>
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	68 96       	adiw	r28, 0x18	; 24
     fca:	e2 e0       	ldi	r30, 0x02	; 2
     fcc:	46 c2       	rjmp	.+1164   	; 0x145a <__epilogue_restores__+0x20>

00000fce <__fixsfsi>:
     fce:	ac e0       	ldi	r26, 0x0C	; 12
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	ec ee       	ldi	r30, 0xEC	; 236
     fd4:	f7 e0       	ldi	r31, 0x07	; 7
     fd6:	23 c2       	rjmp	.+1094   	; 0x141e <__prologue_saves__+0x1c>
     fd8:	69 87       	std	Y+9, r22	; 0x09
     fda:	7a 87       	std	Y+10, r23	; 0x0a
     fdc:	8b 87       	std	Y+11, r24	; 0x0b
     fde:	9c 87       	std	Y+12, r25	; 0x0c
     fe0:	be 01       	movw	r22, r28
     fe2:	6f 5f       	subi	r22, 0xFF	; 255
     fe4:	7f 4f       	sbci	r23, 0xFF	; 255
     fe6:	ce 01       	movw	r24, r28
     fe8:	09 96       	adiw	r24, 0x09	; 9
     fea:	fe d0       	rcall	.+508    	; 0x11e8 <__unpack_f>
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	82 30       	cpi	r24, 0x02	; 2
     ff0:	91 f1       	breq	.+100    	; 0x1056 <__fixsfsi+0x88>
     ff2:	82 30       	cpi	r24, 0x02	; 2
     ff4:	80 f1       	brcs	.+96     	; 0x1056 <__fixsfsi+0x88>
     ff6:	84 30       	cpi	r24, 0x04	; 4
     ff8:	41 f4       	brne	.+16     	; 0x100a <__fixsfsi+0x3c>
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
     ffc:	88 23       	and	r24, r24
     ffe:	31 f1       	breq	.+76     	; 0x104c <__fixsfsi+0x7e>
    1000:	00 e0       	ldi	r16, 0x00	; 0
    1002:	10 e0       	ldi	r17, 0x00	; 0
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 e8       	ldi	r19, 0x80	; 128
    1008:	29 c0       	rjmp	.+82     	; 0x105c <__fixsfsi+0x8e>
    100a:	2b 81       	ldd	r18, Y+3	; 0x03
    100c:	3c 81       	ldd	r19, Y+4	; 0x04
    100e:	37 fd       	sbrc	r19, 7
    1010:	22 c0       	rjmp	.+68     	; 0x1056 <__fixsfsi+0x88>
    1012:	2f 31       	cpi	r18, 0x1F	; 31
    1014:	31 05       	cpc	r19, r1
    1016:	8c f7       	brge	.-30     	; 0xffa <__fixsfsi+0x2c>
    1018:	8e e1       	ldi	r24, 0x1E	; 30
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	82 1b       	sub	r24, r18
    101e:	93 0b       	sbc	r25, r19
    1020:	0d 81       	ldd	r16, Y+5	; 0x05
    1022:	1e 81       	ldd	r17, Y+6	; 0x06
    1024:	2f 81       	ldd	r18, Y+7	; 0x07
    1026:	38 85       	ldd	r19, Y+8	; 0x08
    1028:	04 c0       	rjmp	.+8      	; 0x1032 <__fixsfsi+0x64>
    102a:	36 95       	lsr	r19
    102c:	27 95       	ror	r18
    102e:	17 95       	ror	r17
    1030:	07 95       	ror	r16
    1032:	8a 95       	dec	r24
    1034:	d2 f7       	brpl	.-12     	; 0x102a <__fixsfsi+0x5c>
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	88 23       	and	r24, r24
    103a:	81 f0       	breq	.+32     	; 0x105c <__fixsfsi+0x8e>
    103c:	30 95       	com	r19
    103e:	20 95       	com	r18
    1040:	10 95       	com	r17
    1042:	01 95       	neg	r16
    1044:	1f 4f       	sbci	r17, 0xFF	; 255
    1046:	2f 4f       	sbci	r18, 0xFF	; 255
    1048:	3f 4f       	sbci	r19, 0xFF	; 255
    104a:	08 c0       	rjmp	.+16     	; 0x105c <__fixsfsi+0x8e>
    104c:	0f ef       	ldi	r16, 0xFF	; 255
    104e:	1f ef       	ldi	r17, 0xFF	; 255
    1050:	2f ef       	ldi	r18, 0xFF	; 255
    1052:	3f e7       	ldi	r19, 0x7F	; 127
    1054:	03 c0       	rjmp	.+6      	; 0x105c <__fixsfsi+0x8e>
    1056:	00 e0       	ldi	r16, 0x00	; 0
    1058:	10 e0       	ldi	r17, 0x00	; 0
    105a:	98 01       	movw	r18, r16
    105c:	b8 01       	movw	r22, r16
    105e:	c9 01       	movw	r24, r18
    1060:	2c 96       	adiw	r28, 0x0c	; 12
    1062:	e4 e0       	ldi	r30, 0x04	; 4
    1064:	f8 c1       	rjmp	.+1008   	; 0x1456 <__epilogue_restores__+0x1c>

00001066 <__pack_f>:
    1066:	0f 93       	push	r16
    1068:	1f 93       	push	r17
    106a:	cf 93       	push	r28
    106c:	fc 01       	movw	r30, r24
    106e:	44 81       	ldd	r20, Z+4	; 0x04
    1070:	55 81       	ldd	r21, Z+5	; 0x05
    1072:	66 81       	ldd	r22, Z+6	; 0x06
    1074:	77 81       	ldd	r23, Z+7	; 0x07
    1076:	c1 81       	ldd	r28, Z+1	; 0x01
    1078:	80 81       	ld	r24, Z
    107a:	82 30       	cpi	r24, 0x02	; 2
    107c:	20 f4       	brcc	.+8      	; 0x1086 <__pack_f+0x20>
    107e:	60 61       	ori	r22, 0x10	; 16
    1080:	8f ef       	ldi	r24, 0xFF	; 255
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	a3 c0       	rjmp	.+326    	; 0x11cc <__pack_f+0x166>
    1086:	84 30       	cpi	r24, 0x04	; 4
    1088:	09 f4       	brne	.+2      	; 0x108c <__pack_f+0x26>
    108a:	9b c0       	rjmp	.+310    	; 0x11c2 <__pack_f+0x15c>
    108c:	82 30       	cpi	r24, 0x02	; 2
    108e:	09 f4       	brne	.+2      	; 0x1092 <__pack_f+0x2c>
    1090:	92 c0       	rjmp	.+292    	; 0x11b6 <__pack_f+0x150>
    1092:	41 15       	cp	r20, r1
    1094:	51 05       	cpc	r21, r1
    1096:	61 05       	cpc	r22, r1
    1098:	71 05       	cpc	r23, r1
    109a:	09 f4       	brne	.+2      	; 0x109e <__pack_f+0x38>
    109c:	8f c0       	rjmp	.+286    	; 0x11bc <__pack_f+0x156>
    109e:	22 81       	ldd	r18, Z+2	; 0x02
    10a0:	33 81       	ldd	r19, Z+3	; 0x03
    10a2:	22 38       	cpi	r18, 0x82	; 130
    10a4:	8f ef       	ldi	r24, 0xFF	; 255
    10a6:	38 07       	cpc	r19, r24
    10a8:	0c f0       	brlt	.+2      	; 0x10ac <__pack_f+0x46>
    10aa:	57 c0       	rjmp	.+174    	; 0x115a <__pack_f+0xf4>
    10ac:	e2 e8       	ldi	r30, 0x82	; 130
    10ae:	ff ef       	ldi	r31, 0xFF	; 255
    10b0:	e2 1b       	sub	r30, r18
    10b2:	f3 0b       	sbc	r31, r19
    10b4:	ea 31       	cpi	r30, 0x1A	; 26
    10b6:	f1 05       	cpc	r31, r1
    10b8:	64 f5       	brge	.+88     	; 0x1112 <__pack_f+0xac>
    10ba:	8a 01       	movw	r16, r20
    10bc:	9b 01       	movw	r18, r22
    10be:	0e 2e       	mov	r0, r30
    10c0:	04 c0       	rjmp	.+8      	; 0x10ca <__pack_f+0x64>
    10c2:	36 95       	lsr	r19
    10c4:	27 95       	ror	r18
    10c6:	17 95       	ror	r17
    10c8:	07 95       	ror	r16
    10ca:	0a 94       	dec	r0
    10cc:	d2 f7       	brpl	.-12     	; 0x10c2 <__pack_f+0x5c>
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	a0 e0       	ldi	r26, 0x00	; 0
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	04 c0       	rjmp	.+8      	; 0x10e0 <__pack_f+0x7a>
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	aa 1f       	adc	r26, r26
    10de:	bb 1f       	adc	r27, r27
    10e0:	ea 95       	dec	r30
    10e2:	d2 f7       	brpl	.-12     	; 0x10d8 <__pack_f+0x72>
    10e4:	01 97       	sbiw	r24, 0x01	; 1
    10e6:	a1 09       	sbc	r26, r1
    10e8:	b1 09       	sbc	r27, r1
    10ea:	84 23       	and	r24, r20
    10ec:	95 23       	and	r25, r21
    10ee:	a6 23       	and	r26, r22
    10f0:	b7 23       	and	r27, r23
    10f2:	41 e0       	ldi	r20, 0x01	; 1
    10f4:	50 e0       	ldi	r21, 0x00	; 0
    10f6:	60 e0       	ldi	r22, 0x00	; 0
    10f8:	70 e0       	ldi	r23, 0x00	; 0
    10fa:	89 2b       	or	r24, r25
    10fc:	8a 2b       	or	r24, r26
    10fe:	8b 2b       	or	r24, r27
    1100:	19 f4       	brne	.+6      	; 0x1108 <__pack_f+0xa2>
    1102:	40 e0       	ldi	r20, 0x00	; 0
    1104:	50 e0       	ldi	r21, 0x00	; 0
    1106:	ba 01       	movw	r22, r20
    1108:	40 2b       	or	r20, r16
    110a:	51 2b       	or	r21, r17
    110c:	62 2b       	or	r22, r18
    110e:	73 2b       	or	r23, r19
    1110:	03 c0       	rjmp	.+6      	; 0x1118 <__pack_f+0xb2>
    1112:	40 e0       	ldi	r20, 0x00	; 0
    1114:	50 e0       	ldi	r21, 0x00	; 0
    1116:	ba 01       	movw	r22, r20
    1118:	db 01       	movw	r26, r22
    111a:	ca 01       	movw	r24, r20
    111c:	8f 77       	andi	r24, 0x7F	; 127
    111e:	99 27       	eor	r25, r25
    1120:	aa 27       	eor	r26, r26
    1122:	bb 27       	eor	r27, r27
    1124:	80 34       	cpi	r24, 0x40	; 64
    1126:	91 05       	cpc	r25, r1
    1128:	a1 05       	cpc	r26, r1
    112a:	b1 05       	cpc	r27, r1
    112c:	39 f4       	brne	.+14     	; 0x113c <__pack_f+0xd6>
    112e:	47 ff       	sbrs	r20, 7
    1130:	09 c0       	rjmp	.+18     	; 0x1144 <__pack_f+0xde>
    1132:	40 5c       	subi	r20, 0xC0	; 192
    1134:	5f 4f       	sbci	r21, 0xFF	; 255
    1136:	6f 4f       	sbci	r22, 0xFF	; 255
    1138:	7f 4f       	sbci	r23, 0xFF	; 255
    113a:	04 c0       	rjmp	.+8      	; 0x1144 <__pack_f+0xde>
    113c:	41 5c       	subi	r20, 0xC1	; 193
    113e:	5f 4f       	sbci	r21, 0xFF	; 255
    1140:	6f 4f       	sbci	r22, 0xFF	; 255
    1142:	7f 4f       	sbci	r23, 0xFF	; 255
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	41 15       	cp	r20, r1
    114a:	51 05       	cpc	r21, r1
    114c:	61 05       	cpc	r22, r1
    114e:	20 e4       	ldi	r18, 0x40	; 64
    1150:	72 07       	cpc	r23, r18
    1152:	48 f5       	brcc	.+82     	; 0x11a6 <__pack_f+0x140>
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	26 c0       	rjmp	.+76     	; 0x11a6 <__pack_f+0x140>
    115a:	20 38       	cpi	r18, 0x80	; 128
    115c:	31 05       	cpc	r19, r1
    115e:	8c f5       	brge	.+98     	; 0x11c2 <__pack_f+0x15c>
    1160:	db 01       	movw	r26, r22
    1162:	ca 01       	movw	r24, r20
    1164:	8f 77       	andi	r24, 0x7F	; 127
    1166:	99 27       	eor	r25, r25
    1168:	aa 27       	eor	r26, r26
    116a:	bb 27       	eor	r27, r27
    116c:	80 34       	cpi	r24, 0x40	; 64
    116e:	91 05       	cpc	r25, r1
    1170:	a1 05       	cpc	r26, r1
    1172:	b1 05       	cpc	r27, r1
    1174:	39 f4       	brne	.+14     	; 0x1184 <__pack_f+0x11e>
    1176:	47 ff       	sbrs	r20, 7
    1178:	09 c0       	rjmp	.+18     	; 0x118c <__pack_f+0x126>
    117a:	40 5c       	subi	r20, 0xC0	; 192
    117c:	5f 4f       	sbci	r21, 0xFF	; 255
    117e:	6f 4f       	sbci	r22, 0xFF	; 255
    1180:	7f 4f       	sbci	r23, 0xFF	; 255
    1182:	04 c0       	rjmp	.+8      	; 0x118c <__pack_f+0x126>
    1184:	41 5c       	subi	r20, 0xC1	; 193
    1186:	5f 4f       	sbci	r21, 0xFF	; 255
    1188:	6f 4f       	sbci	r22, 0xFF	; 255
    118a:	7f 4f       	sbci	r23, 0xFF	; 255
    118c:	77 fd       	sbrc	r23, 7
    118e:	04 c0       	rjmp	.+8      	; 0x1198 <__pack_f+0x132>
    1190:	c9 01       	movw	r24, r18
    1192:	81 58       	subi	r24, 0x81	; 129
    1194:	9f 4f       	sbci	r25, 0xFF	; 255
    1196:	07 c0       	rjmp	.+14     	; 0x11a6 <__pack_f+0x140>
    1198:	76 95       	lsr	r23
    119a:	67 95       	ror	r22
    119c:	57 95       	ror	r21
    119e:	47 95       	ror	r20
    11a0:	c9 01       	movw	r24, r18
    11a2:	80 58       	subi	r24, 0x80	; 128
    11a4:	9f 4f       	sbci	r25, 0xFF	; 255
    11a6:	97 e0       	ldi	r25, 0x07	; 7
    11a8:	76 95       	lsr	r23
    11aa:	67 95       	ror	r22
    11ac:	57 95       	ror	r21
    11ae:	47 95       	ror	r20
    11b0:	9a 95       	dec	r25
    11b2:	d1 f7       	brne	.-12     	; 0x11a8 <__pack_f+0x142>
    11b4:	0b c0       	rjmp	.+22     	; 0x11cc <__pack_f+0x166>
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	05 c0       	rjmp	.+10     	; 0x11c6 <__pack_f+0x160>
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	05 c0       	rjmp	.+10     	; 0x11cc <__pack_f+0x166>
    11c2:	8f ef       	ldi	r24, 0xFF	; 255
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	40 e0       	ldi	r20, 0x00	; 0
    11c8:	50 e0       	ldi	r21, 0x00	; 0
    11ca:	ba 01       	movw	r22, r20
    11cc:	98 2f       	mov	r25, r24
    11ce:	96 95       	lsr	r25
    11d0:	c0 fb       	bst	r28, 0
    11d2:	97 f9       	bld	r25, 7
    11d4:	36 2f       	mov	r19, r22
    11d6:	80 fb       	bst	r24, 0
    11d8:	37 f9       	bld	r19, 7
    11da:	64 2f       	mov	r22, r20
    11dc:	75 2f       	mov	r23, r21
    11de:	83 2f       	mov	r24, r19
    11e0:	cf 91       	pop	r28
    11e2:	1f 91       	pop	r17
    11e4:	0f 91       	pop	r16
    11e6:	08 95       	ret

000011e8 <__unpack_f>:
    11e8:	cf 92       	push	r12
    11ea:	df 92       	push	r13
    11ec:	ef 92       	push	r14
    11ee:	dc 01       	movw	r26, r24
    11f0:	fb 01       	movw	r30, r22
    11f2:	cc 90       	ld	r12, X
    11f4:	11 96       	adiw	r26, 0x01	; 1
    11f6:	dc 90       	ld	r13, X
    11f8:	11 97       	sbiw	r26, 0x01	; 1
    11fa:	12 96       	adiw	r26, 0x02	; 2
    11fc:	8c 91       	ld	r24, X
    11fe:	12 97       	sbiw	r26, 0x02	; 2
    1200:	3f e7       	ldi	r19, 0x7F	; 127
    1202:	e3 2e       	mov	r14, r19
    1204:	e8 22       	and	r14, r24
    1206:	6e 2d       	mov	r22, r14
    1208:	a6 01       	movw	r20, r12
    120a:	70 e0       	ldi	r23, 0x00	; 0
    120c:	98 2f       	mov	r25, r24
    120e:	99 1f       	adc	r25, r25
    1210:	99 27       	eor	r25, r25
    1212:	99 1f       	adc	r25, r25
    1214:	13 96       	adiw	r26, 0x03	; 3
    1216:	2c 91       	ld	r18, X
    1218:	82 2f       	mov	r24, r18
    121a:	88 0f       	add	r24, r24
    121c:	89 2b       	or	r24, r25
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	27 fb       	bst	r18, 7
    1222:	22 27       	eor	r18, r18
    1224:	20 f9       	bld	r18, 0
    1226:	21 83       	std	Z+1, r18	; 0x01
    1228:	00 97       	sbiw	r24, 0x00	; 0
    122a:	29 f5       	brne	.+74     	; 0x1276 <__unpack_f+0x8e>
    122c:	41 15       	cp	r20, r1
    122e:	51 05       	cpc	r21, r1
    1230:	61 05       	cpc	r22, r1
    1232:	71 05       	cpc	r23, r1
    1234:	11 f4       	brne	.+4      	; 0x123a <__unpack_f+0x52>
    1236:	82 e0       	ldi	r24, 0x02	; 2
    1238:	27 c0       	rjmp	.+78     	; 0x1288 <__unpack_f+0xa0>
    123a:	82 e8       	ldi	r24, 0x82	; 130
    123c:	9f ef       	ldi	r25, 0xFF	; 255
    123e:	93 83       	std	Z+3, r25	; 0x03
    1240:	82 83       	std	Z+2, r24	; 0x02
    1242:	27 e0       	ldi	r18, 0x07	; 7
    1244:	44 0f       	add	r20, r20
    1246:	55 1f       	adc	r21, r21
    1248:	66 1f       	adc	r22, r22
    124a:	77 1f       	adc	r23, r23
    124c:	2a 95       	dec	r18
    124e:	d1 f7       	brne	.-12     	; 0x1244 <__unpack_f+0x5c>
    1250:	83 e0       	ldi	r24, 0x03	; 3
    1252:	80 83       	st	Z, r24
    1254:	09 c0       	rjmp	.+18     	; 0x1268 <__unpack_f+0x80>
    1256:	44 0f       	add	r20, r20
    1258:	55 1f       	adc	r21, r21
    125a:	66 1f       	adc	r22, r22
    125c:	77 1f       	adc	r23, r23
    125e:	82 81       	ldd	r24, Z+2	; 0x02
    1260:	93 81       	ldd	r25, Z+3	; 0x03
    1262:	01 97       	sbiw	r24, 0x01	; 1
    1264:	93 83       	std	Z+3, r25	; 0x03
    1266:	82 83       	std	Z+2, r24	; 0x02
    1268:	41 15       	cp	r20, r1
    126a:	51 05       	cpc	r21, r1
    126c:	61 05       	cpc	r22, r1
    126e:	80 e4       	ldi	r24, 0x40	; 64
    1270:	78 07       	cpc	r23, r24
    1272:	88 f3       	brcs	.-30     	; 0x1256 <__unpack_f+0x6e>
    1274:	20 c0       	rjmp	.+64     	; 0x12b6 <__unpack_f+0xce>
    1276:	8f 3f       	cpi	r24, 0xFF	; 255
    1278:	91 05       	cpc	r25, r1
    127a:	79 f4       	brne	.+30     	; 0x129a <__unpack_f+0xb2>
    127c:	41 15       	cp	r20, r1
    127e:	51 05       	cpc	r21, r1
    1280:	61 05       	cpc	r22, r1
    1282:	71 05       	cpc	r23, r1
    1284:	19 f4       	brne	.+6      	; 0x128c <__unpack_f+0xa4>
    1286:	84 e0       	ldi	r24, 0x04	; 4
    1288:	80 83       	st	Z, r24
    128a:	19 c0       	rjmp	.+50     	; 0x12be <__unpack_f+0xd6>
    128c:	e4 fe       	sbrs	r14, 4
    128e:	03 c0       	rjmp	.+6      	; 0x1296 <__unpack_f+0xae>
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	80 83       	st	Z, r24
    1294:	10 c0       	rjmp	.+32     	; 0x12b6 <__unpack_f+0xce>
    1296:	10 82       	st	Z, r1
    1298:	0e c0       	rjmp	.+28     	; 0x12b6 <__unpack_f+0xce>
    129a:	8f 57       	subi	r24, 0x7F	; 127
    129c:	91 09       	sbc	r25, r1
    129e:	93 83       	std	Z+3, r25	; 0x03
    12a0:	82 83       	std	Z+2, r24	; 0x02
    12a2:	83 e0       	ldi	r24, 0x03	; 3
    12a4:	80 83       	st	Z, r24
    12a6:	87 e0       	ldi	r24, 0x07	; 7
    12a8:	44 0f       	add	r20, r20
    12aa:	55 1f       	adc	r21, r21
    12ac:	66 1f       	adc	r22, r22
    12ae:	77 1f       	adc	r23, r23
    12b0:	8a 95       	dec	r24
    12b2:	d1 f7       	brne	.-12     	; 0x12a8 <__unpack_f+0xc0>
    12b4:	70 64       	ori	r23, 0x40	; 64
    12b6:	44 83       	std	Z+4, r20	; 0x04
    12b8:	55 83       	std	Z+5, r21	; 0x05
    12ba:	66 83       	std	Z+6, r22	; 0x06
    12bc:	77 83       	std	Z+7, r23	; 0x07
    12be:	ef 90       	pop	r14
    12c0:	df 90       	pop	r13
    12c2:	cf 90       	pop	r12
    12c4:	08 95       	ret

000012c6 <__fpcmp_parts_f>:
    12c6:	cf 93       	push	r28
    12c8:	fc 01       	movw	r30, r24
    12ca:	db 01       	movw	r26, r22
    12cc:	90 81       	ld	r25, Z
    12ce:	92 30       	cpi	r25, 0x02	; 2
    12d0:	08 f4       	brcc	.+2      	; 0x12d4 <__fpcmp_parts_f+0xe>
    12d2:	52 c0       	rjmp	.+164    	; 0x1378 <__fpcmp_parts_f+0xb2>
    12d4:	8c 91       	ld	r24, X
    12d6:	82 30       	cpi	r24, 0x02	; 2
    12d8:	08 f4       	brcc	.+2      	; 0x12dc <__fpcmp_parts_f+0x16>
    12da:	4e c0       	rjmp	.+156    	; 0x1378 <__fpcmp_parts_f+0xb2>
    12dc:	94 30       	cpi	r25, 0x04	; 4
    12de:	71 f4       	brne	.+28     	; 0x12fc <__fpcmp_parts_f+0x36>
    12e0:	84 30       	cpi	r24, 0x04	; 4
    12e2:	39 f4       	brne	.+14     	; 0x12f2 <__fpcmp_parts_f+0x2c>
    12e4:	11 96       	adiw	r26, 0x01	; 1
    12e6:	2c 91       	ld	r18, X
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	81 81       	ldd	r24, Z+1	; 0x01
    12ec:	28 1b       	sub	r18, r24
    12ee:	31 09       	sbc	r19, r1
    12f0:	48 c0       	rjmp	.+144    	; 0x1382 <__fpcmp_parts_f+0xbc>
    12f2:	81 81       	ldd	r24, Z+1	; 0x01
    12f4:	88 23       	and	r24, r24
    12f6:	09 f4       	brne	.+2      	; 0x12fa <__fpcmp_parts_f+0x34>
    12f8:	3f c0       	rjmp	.+126    	; 0x1378 <__fpcmp_parts_f+0xb2>
    12fa:	3b c0       	rjmp	.+118    	; 0x1372 <__fpcmp_parts_f+0xac>
    12fc:	84 30       	cpi	r24, 0x04	; 4
    12fe:	29 f4       	brne	.+10     	; 0x130a <__fpcmp_parts_f+0x44>
    1300:	11 96       	adiw	r26, 0x01	; 1
    1302:	8c 91       	ld	r24, X
    1304:	81 11       	cpse	r24, r1
    1306:	38 c0       	rjmp	.+112    	; 0x1378 <__fpcmp_parts_f+0xb2>
    1308:	34 c0       	rjmp	.+104    	; 0x1372 <__fpcmp_parts_f+0xac>
    130a:	92 30       	cpi	r25, 0x02	; 2
    130c:	19 f4       	brne	.+6      	; 0x1314 <__fpcmp_parts_f+0x4e>
    130e:	82 30       	cpi	r24, 0x02	; 2
    1310:	b9 f7       	brne	.-18     	; 0x1300 <__fpcmp_parts_f+0x3a>
    1312:	35 c0       	rjmp	.+106    	; 0x137e <__fpcmp_parts_f+0xb8>
    1314:	82 30       	cpi	r24, 0x02	; 2
    1316:	69 f3       	breq	.-38     	; 0x12f2 <__fpcmp_parts_f+0x2c>
    1318:	c1 81       	ldd	r28, Z+1	; 0x01
    131a:	11 96       	adiw	r26, 0x01	; 1
    131c:	8c 91       	ld	r24, X
    131e:	11 97       	sbiw	r26, 0x01	; 1
    1320:	c8 13       	cpse	r28, r24
    1322:	1d c0       	rjmp	.+58     	; 0x135e <__fpcmp_parts_f+0x98>
    1324:	22 81       	ldd	r18, Z+2	; 0x02
    1326:	33 81       	ldd	r19, Z+3	; 0x03
    1328:	12 96       	adiw	r26, 0x02	; 2
    132a:	8d 91       	ld	r24, X+
    132c:	9c 91       	ld	r25, X
    132e:	13 97       	sbiw	r26, 0x03	; 3
    1330:	82 17       	cp	r24, r18
    1332:	93 07       	cpc	r25, r19
    1334:	0c f4       	brge	.+2      	; 0x1338 <__fpcmp_parts_f+0x72>
    1336:	13 c0       	rjmp	.+38     	; 0x135e <__fpcmp_parts_f+0x98>
    1338:	28 17       	cp	r18, r24
    133a:	39 07       	cpc	r19, r25
    133c:	0c f4       	brge	.+2      	; 0x1340 <__fpcmp_parts_f+0x7a>
    133e:	17 c0       	rjmp	.+46     	; 0x136e <__fpcmp_parts_f+0xa8>
    1340:	44 81       	ldd	r20, Z+4	; 0x04
    1342:	55 81       	ldd	r21, Z+5	; 0x05
    1344:	66 81       	ldd	r22, Z+6	; 0x06
    1346:	77 81       	ldd	r23, Z+7	; 0x07
    1348:	14 96       	adiw	r26, 0x04	; 4
    134a:	8d 91       	ld	r24, X+
    134c:	9d 91       	ld	r25, X+
    134e:	0d 90       	ld	r0, X+
    1350:	bc 91       	ld	r27, X
    1352:	a0 2d       	mov	r26, r0
    1354:	84 17       	cp	r24, r20
    1356:	95 07       	cpc	r25, r21
    1358:	a6 07       	cpc	r26, r22
    135a:	b7 07       	cpc	r27, r23
    135c:	18 f4       	brcc	.+6      	; 0x1364 <__fpcmp_parts_f+0x9e>
    135e:	c1 11       	cpse	r28, r1
    1360:	08 c0       	rjmp	.+16     	; 0x1372 <__fpcmp_parts_f+0xac>
    1362:	0a c0       	rjmp	.+20     	; 0x1378 <__fpcmp_parts_f+0xb2>
    1364:	48 17       	cp	r20, r24
    1366:	59 07       	cpc	r21, r25
    1368:	6a 07       	cpc	r22, r26
    136a:	7b 07       	cpc	r23, r27
    136c:	40 f4       	brcc	.+16     	; 0x137e <__fpcmp_parts_f+0xb8>
    136e:	c1 11       	cpse	r28, r1
    1370:	03 c0       	rjmp	.+6      	; 0x1378 <__fpcmp_parts_f+0xb2>
    1372:	2f ef       	ldi	r18, 0xFF	; 255
    1374:	3f ef       	ldi	r19, 0xFF	; 255
    1376:	05 c0       	rjmp	.+10     	; 0x1382 <__fpcmp_parts_f+0xbc>
    1378:	21 e0       	ldi	r18, 0x01	; 1
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <__fpcmp_parts_f+0xbc>
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	c9 01       	movw	r24, r18
    1384:	cf 91       	pop	r28
    1386:	08 95       	ret

00001388 <__udivmodsi4>:
    1388:	a1 e2       	ldi	r26, 0x21	; 33
    138a:	1a 2e       	mov	r1, r26
    138c:	aa 1b       	sub	r26, r26
    138e:	bb 1b       	sub	r27, r27
    1390:	fd 01       	movw	r30, r26
    1392:	0d c0       	rjmp	.+26     	; 0x13ae <__udivmodsi4_ep>

00001394 <__udivmodsi4_loop>:
    1394:	aa 1f       	adc	r26, r26
    1396:	bb 1f       	adc	r27, r27
    1398:	ee 1f       	adc	r30, r30
    139a:	ff 1f       	adc	r31, r31
    139c:	a2 17       	cp	r26, r18
    139e:	b3 07       	cpc	r27, r19
    13a0:	e4 07       	cpc	r30, r20
    13a2:	f5 07       	cpc	r31, r21
    13a4:	20 f0       	brcs	.+8      	; 0x13ae <__udivmodsi4_ep>
    13a6:	a2 1b       	sub	r26, r18
    13a8:	b3 0b       	sbc	r27, r19
    13aa:	e4 0b       	sbc	r30, r20
    13ac:	f5 0b       	sbc	r31, r21

000013ae <__udivmodsi4_ep>:
    13ae:	66 1f       	adc	r22, r22
    13b0:	77 1f       	adc	r23, r23
    13b2:	88 1f       	adc	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	1a 94       	dec	r1
    13b8:	69 f7       	brne	.-38     	; 0x1394 <__udivmodsi4_loop>
    13ba:	60 95       	com	r22
    13bc:	70 95       	com	r23
    13be:	80 95       	com	r24
    13c0:	90 95       	com	r25
    13c2:	9b 01       	movw	r18, r22
    13c4:	ac 01       	movw	r20, r24
    13c6:	bd 01       	movw	r22, r26
    13c8:	cf 01       	movw	r24, r30
    13ca:	08 95       	ret

000013cc <__divmodsi4>:
    13cc:	05 2e       	mov	r0, r21
    13ce:	97 fb       	bst	r25, 7
    13d0:	16 f4       	brtc	.+4      	; 0x13d6 <__divmodsi4+0xa>
    13d2:	00 94       	com	r0
    13d4:	06 d0       	rcall	.+12     	; 0x13e2 <__divmodsi4_neg1>
    13d6:	57 fd       	sbrc	r21, 7
    13d8:	0c d0       	rcall	.+24     	; 0x13f2 <__divmodsi4_neg2>
    13da:	d6 df       	rcall	.-84     	; 0x1388 <__udivmodsi4>
    13dc:	07 fc       	sbrc	r0, 7
    13de:	09 d0       	rcall	.+18     	; 0x13f2 <__divmodsi4_neg2>
    13e0:	7e f4       	brtc	.+30     	; 0x1400 <__divmodsi4_exit>

000013e2 <__divmodsi4_neg1>:
    13e2:	90 95       	com	r25
    13e4:	80 95       	com	r24
    13e6:	70 95       	com	r23
    13e8:	61 95       	neg	r22
    13ea:	7f 4f       	sbci	r23, 0xFF	; 255
    13ec:	8f 4f       	sbci	r24, 0xFF	; 255
    13ee:	9f 4f       	sbci	r25, 0xFF	; 255
    13f0:	08 95       	ret

000013f2 <__divmodsi4_neg2>:
    13f2:	50 95       	com	r21
    13f4:	40 95       	com	r20
    13f6:	30 95       	com	r19
    13f8:	21 95       	neg	r18
    13fa:	3f 4f       	sbci	r19, 0xFF	; 255
    13fc:	4f 4f       	sbci	r20, 0xFF	; 255
    13fe:	5f 4f       	sbci	r21, 0xFF	; 255

00001400 <__divmodsi4_exit>:
    1400:	08 95       	ret

00001402 <__prologue_saves__>:
    1402:	2f 92       	push	r2
    1404:	3f 92       	push	r3
    1406:	4f 92       	push	r4
    1408:	5f 92       	push	r5
    140a:	6f 92       	push	r6
    140c:	7f 92       	push	r7
    140e:	8f 92       	push	r8
    1410:	9f 92       	push	r9
    1412:	af 92       	push	r10
    1414:	bf 92       	push	r11
    1416:	cf 92       	push	r12
    1418:	df 92       	push	r13
    141a:	ef 92       	push	r14
    141c:	ff 92       	push	r15
    141e:	0f 93       	push	r16
    1420:	1f 93       	push	r17
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
    142a:	ca 1b       	sub	r28, r26
    142c:	db 0b       	sbc	r29, r27
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	f8 94       	cli
    1432:	de bf       	out	0x3e, r29	; 62
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	cd bf       	out	0x3d, r28	; 61
    1438:	09 94       	ijmp

0000143a <__epilogue_restores__>:
    143a:	2a 88       	ldd	r2, Y+18	; 0x12
    143c:	39 88       	ldd	r3, Y+17	; 0x11
    143e:	48 88       	ldd	r4, Y+16	; 0x10
    1440:	5f 84       	ldd	r5, Y+15	; 0x0f
    1442:	6e 84       	ldd	r6, Y+14	; 0x0e
    1444:	7d 84       	ldd	r7, Y+13	; 0x0d
    1446:	8c 84       	ldd	r8, Y+12	; 0x0c
    1448:	9b 84       	ldd	r9, Y+11	; 0x0b
    144a:	aa 84       	ldd	r10, Y+10	; 0x0a
    144c:	b9 84       	ldd	r11, Y+9	; 0x09
    144e:	c8 84       	ldd	r12, Y+8	; 0x08
    1450:	df 80       	ldd	r13, Y+7	; 0x07
    1452:	ee 80       	ldd	r14, Y+6	; 0x06
    1454:	fd 80       	ldd	r15, Y+5	; 0x05
    1456:	0c 81       	ldd	r16, Y+4	; 0x04
    1458:	1b 81       	ldd	r17, Y+3	; 0x03
    145a:	aa 81       	ldd	r26, Y+2	; 0x02
    145c:	b9 81       	ldd	r27, Y+1	; 0x01
    145e:	ce 0f       	add	r28, r30
    1460:	d1 1d       	adc	r29, r1
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	f8 94       	cli
    1466:	de bf       	out	0x3e, r29	; 62
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	cd bf       	out	0x3d, r28	; 61
    146c:	ed 01       	movw	r28, r26
    146e:	08 95       	ret

00001470 <_exit>:
    1470:	f8 94       	cli

00001472 <__stop_program>:
    1472:	ff cf       	rjmp	.-2      	; 0x1472 <__stop_program>
